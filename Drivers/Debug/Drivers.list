
Drivers.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cd0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000e00  08000e00  00010e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e0c  08000e0c  00010e14  2**0
                  CONTENTS
  4 .ARM          00000000  08000e0c  08000e0c  00010e14  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e0c  08000e14  00010e14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e0c  08000e0c  00010e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e10  08000e10  00010e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000000  08000e14  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08000e14  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010e14  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005f2c  00000000  00000000  00010e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000dee  00000000  00000000  00016d69  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000e02  00000000  00000000  00017b57  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000258  00000000  00000000  00018960  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001f8  00000000  00000000  00018bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000013c6  00000000  00000000  00018db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003b13  00000000  00000000  0001a176  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000b580  00000000  00000000  0001dc89  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00029209  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000758  00000000  00000000  00029284  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000de8 	.word	0x08000de8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000de8 	.word	0x08000de8

08000170 <EEPROM_init>:

#include "EEPROM.h"

I2C hi2c1;
void EEPROM_init()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

	hi2c1.I2Cx = I2C1;
 8000174:	4b0c      	ldr	r3, [pc, #48]	; (80001a8 <EEPROM_init+0x38>)
 8000176:	4a0d      	ldr	r2, [pc, #52]	; (80001ac <EEPROM_init+0x3c>)
 8000178:	601a      	str	r2, [r3, #0]
	hi2c1.Add_Mode = _7BIT_ADD;
 800017a:	4b0b      	ldr	r3, [pc, #44]	; (80001a8 <EEPROM_init+0x38>)
 800017c:	2200      	movs	r2, #0
 800017e:	739a      	strb	r2, [r3, #14]
	hi2c1.SCL_Speed = 100000;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <EEPROM_init+0x38>)
 8000182:	4a0b      	ldr	r2, [pc, #44]	; (80001b0 <EEPROM_init+0x40>)
 8000184:	609a      	str	r2, [r3, #8]
	hi2c1.Dual_EN= DISABLE;
 8000186:	4b08      	ldr	r3, [pc, #32]	; (80001a8 <EEPROM_init+0x38>)
 8000188:	2200      	movs	r2, #0
 800018a:	751a      	strb	r2, [r3, #20]
	hi2c1.IRQ_EN= DISABLE;
 800018c:	4b06      	ldr	r3, [pc, #24]	; (80001a8 <EEPROM_init+0x38>)
 800018e:	2200      	movs	r2, #0
 8000190:	735a      	strb	r2, [r3, #13]
	hi2c1.SCL_Streach_EN= ENABLE;
 8000192:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <EEPROM_init+0x38>)
 8000194:	2201      	movs	r2, #1
 8000196:	731a      	strb	r2, [r3, #12]
	hi2c1.SF_Mode= DISABLE;
 8000198:	4b03      	ldr	r3, [pc, #12]	; (80001a8 <EEPROM_init+0x38>)
 800019a:	2200      	movs	r2, #0
 800019c:	711a      	strb	r2, [r3, #4]

	I2C_INIT(&hi2c1);
 800019e:	4802      	ldr	r0, [pc, #8]	; (80001a8 <EEPROM_init+0x38>)
 80001a0:	f000 fa78 	bl	8000694 <I2C_INIT>
}
 80001a4:	bf00      	nop
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	20000058 	.word	0x20000058
 80001ac:	40005400 	.word	0x40005400
 80001b0:	000186a0 	.word	0x000186a0

080001b4 <EEPROM_Write>:


void EEPROM_Write(uint16_t Memory_Address, uint8_t *DataBuffer, uint8_t Length)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b0c6      	sub	sp, #280	; 0x118
 80001b8:	af02      	add	r7, sp, #8
 80001ba:	463b      	mov	r3, r7
 80001bc:	6019      	str	r1, [r3, #0]
 80001be:	4611      	mov	r1, r2
 80001c0:	1dbb      	adds	r3, r7, #6
 80001c2:	4602      	mov	r2, r0
 80001c4:	801a      	strh	r2, [r3, #0]
 80001c6:	1d7b      	adds	r3, r7, #5
 80001c8:	460a      	mov	r2, r1
 80001ca:	701a      	strb	r2, [r3, #0]
	SS_State Start_Stop;
	Start_Stop.START_Cond = START;
 80001cc:	2300      	movs	r3, #0
 80001ce:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	Start_Stop.STOP_Cond = WithSTOP;
 80001d2:	2300      	movs	r3, #0
 80001d4:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t Buffer [256];
	Buffer[0] = (unsigned char)((Memory_Address & 0xFF00) >> 8); 	// Upper Byte of address
 80001d8:	1dbb      	adds	r3, r7, #6
 80001da:	881b      	ldrh	r3, [r3, #0]
 80001dc:	0a1b      	lsrs	r3, r3, #8
 80001de:	b29b      	uxth	r3, r3
 80001e0:	b2da      	uxtb	r2, r3
 80001e2:	f107 030c 	add.w	r3, r7, #12
 80001e6:	701a      	strb	r2, [r3, #0]
	Buffer[1] = (unsigned char)(Memory_Address & 0x00FF); 			// Lower Byte of address
 80001e8:	1dbb      	adds	r3, r7, #6
 80001ea:	881b      	ldrh	r3, [r3, #0]
 80001ec:	b2da      	uxtb	r2, r3
 80001ee:	f107 030c 	add.w	r3, r7, #12
 80001f2:	705a      	strb	r2, [r3, #1]

	for (uint16_t i = 2; i < Length+2; i++)
 80001f4:	2302      	movs	r3, #2
 80001f6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 80001fa:	e011      	b.n	8000220 <EEPROM_Write+0x6c>
	{
		Buffer[i] = *DataBuffer;
 80001fc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8000200:	463a      	mov	r2, r7
 8000202:	6812      	ldr	r2, [r2, #0]
 8000204:	7811      	ldrb	r1, [r2, #0]
 8000206:	f107 020c 	add.w	r2, r7, #12
 800020a:	54d1      	strb	r1, [r2, r3]
		DataBuffer++;
 800020c:	463b      	mov	r3, r7
 800020e:	463a      	mov	r2, r7
 8000210:	6812      	ldr	r2, [r2, #0]
 8000212:	3201      	adds	r2, #1
 8000214:	601a      	str	r2, [r3, #0]
	for (uint16_t i = 2; i < Length+2; i++)
 8000216:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800021a:	3301      	adds	r3, #1
 800021c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8000220:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8000224:	1d7b      	adds	r3, r7, #5
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	3302      	adds	r3, #2
 800022a:	429a      	cmp	r2, r3
 800022c:	dbe6      	blt.n	80001fc <EEPROM_Write+0x48>
	}

//	Write on the Mem Address Data
	I2C_Master_Transmit(&hi2c1, EEPROM_Slave_Address, &Start_Stop, _7BIT_ADD, Buffer, (Length+2));
 800022e:	1d7b      	adds	r3, r7, #5
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	3302      	adds	r3, #2
 8000234:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8000238:	9301      	str	r3, [sp, #4]
 800023a:	f107 030c 	add.w	r3, r7, #12
 800023e:	9300      	str	r3, [sp, #0]
 8000240:	2300      	movs	r3, #0
 8000242:	212a      	movs	r1, #42	; 0x2a
 8000244:	4803      	ldr	r0, [pc, #12]	; (8000254 <EEPROM_Write+0xa0>)
 8000246:	f000 fb15 	bl	8000874 <I2C_Master_Transmit>

//	I2C_Master_Write(&I2C_Instant, Bit_7, EEPROM_Slave_Address, bytes, Length+2, With_Stop,Start);
}
 800024a:	bf00      	nop
 800024c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	20000058 	.word	0x20000058

08000258 <EEPROM_Read>:

void EEPROM_Read(uint16_t Memory_Address, uint8_t *DataBuffer, uint8_t Length)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b086      	sub	sp, #24
 800025c:	af02      	add	r7, sp, #8
 800025e:	4603      	mov	r3, r0
 8000260:	6039      	str	r1, [r7, #0]
 8000262:	80fb      	strh	r3, [r7, #6]
 8000264:	4613      	mov	r3, r2
 8000266:	717b      	strb	r3, [r7, #5]
	SS_State Start_Stop;
	Start_Stop.START_Cond = START;
 8000268:	2300      	movs	r3, #0
 800026a:	733b      	strb	r3, [r7, #12]
	Start_Stop.STOP_Cond = WithoutSTOP;
 800026c:	2301      	movs	r3, #1
 800026e:	737b      	strb	r3, [r7, #13]

	uint8_t Buffer[2];
	Buffer[0] = (unsigned char)((Memory_Address & 0xFF00) >> 8); 	// Upper Byte of address
 8000270:	88fb      	ldrh	r3, [r7, #6]
 8000272:	0a1b      	lsrs	r3, r3, #8
 8000274:	b29b      	uxth	r3, r3
 8000276:	b2db      	uxtb	r3, r3
 8000278:	723b      	strb	r3, [r7, #8]
	Buffer[1] = (unsigned char)(Memory_Address & 0x00FF); 			// Lower Byte of address
 800027a:	88fb      	ldrh	r3, [r7, #6]
 800027c:	b2db      	uxtb	r3, r3
 800027e:	727b      	strb	r3, [r7, #9]



	I2C_Master_Transmit(&hi2c1, EEPROM_Slave_Address, &Start_Stop, _7BIT_ADD, Buffer, 2);
 8000280:	f107 020c 	add.w	r2, r7, #12
 8000284:	2302      	movs	r3, #2
 8000286:	9301      	str	r3, [sp, #4]
 8000288:	f107 0308 	add.w	r3, r7, #8
 800028c:	9300      	str	r3, [sp, #0]
 800028e:	2300      	movs	r3, #0
 8000290:	212a      	movs	r1, #42	; 0x2a
 8000292:	480b      	ldr	r0, [pc, #44]	; (80002c0 <EEPROM_Read+0x68>)
 8000294:	f000 faee 	bl	8000874 <I2C_Master_Transmit>

	Start_Stop.START_Cond = RepeatedSTART;
 8000298:	2301      	movs	r3, #1
 800029a:	733b      	strb	r3, [r7, #12]
	Start_Stop.STOP_Cond = WithSTOP;
 800029c:	2300      	movs	r3, #0
 800029e:	737b      	strb	r3, [r7, #13]

	I2C_Master_Recieve(&hi2c1, EEPROM_Slave_Address, &Start_Stop, _7BIT_ADD, DataBuffer, 2);
 80002a0:	f107 020c 	add.w	r2, r7, #12
 80002a4:	2302      	movs	r3, #2
 80002a6:	9301      	str	r3, [sp, #4]
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	9300      	str	r3, [sp, #0]
 80002ac:	2300      	movs	r3, #0
 80002ae:	212a      	movs	r1, #42	; 0x2a
 80002b0:	4803      	ldr	r0, [pc, #12]	; (80002c0 <EEPROM_Read+0x68>)
 80002b2:	f000 fb58 	bl	8000966 <I2C_Master_Recieve>

}
 80002b6:	bf00      	nop
 80002b8:	3710      	adds	r7, #16
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	20000058 	.word	0x20000058

080002c4 <EXTI0_IRQHandler>:
	default: break;
	}
}

void EXTI0_IRQHandler(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	// While Execution this function Means that NVIC Receive Ack signal from CPU
	// Disable Pending Request From EXTI Peripheral And Calling Your Provided Function
	EXTI->PR |= 1<<EXTI0;
 80002c8:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <EXTI0_IRQHandler+0x1c>)
 80002ca:	695b      	ldr	r3, [r3, #20]
 80002cc:	4a04      	ldr	r2, [pc, #16]	; (80002e0 <EXTI0_IRQHandler+0x1c>)
 80002ce:	f043 0301 	orr.w	r3, r3, #1
 80002d2:	6153      	str	r3, [r2, #20]
	GP_IRQ[0]();
 80002d4:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <EXTI0_IRQHandler+0x20>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4798      	blx	r3
}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40010400 	.word	0x40010400
 80002e4:	2000001c 	.word	0x2000001c

080002e8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	// While Execution this function Means that NVIC Receive Ack signal from CPU
	// Disable Pending Request From EXTI Peripheral And Calling Your Provided Function
	EXTI->PR |= 1<<EXTI1;
 80002ec:	4b05      	ldr	r3, [pc, #20]	; (8000304 <EXTI1_IRQHandler+0x1c>)
 80002ee:	695b      	ldr	r3, [r3, #20]
 80002f0:	4a04      	ldr	r2, [pc, #16]	; (8000304 <EXTI1_IRQHandler+0x1c>)
 80002f2:	f043 0302 	orr.w	r3, r3, #2
 80002f6:	6153      	str	r3, [r2, #20]
	GP_IRQ[1]();
 80002f8:	4b03      	ldr	r3, [pc, #12]	; (8000308 <EXTI1_IRQHandler+0x20>)
 80002fa:	685b      	ldr	r3, [r3, #4]
 80002fc:	4798      	blx	r3
}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40010400 	.word	0x40010400
 8000308:	2000001c 	.word	0x2000001c

0800030c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	// While Execution this function Means that NVIC Receive Ack signal from CPU
	// Disable Pending Request From EXTI Peripheral And Calling Your Provided Function
	EXTI->PR |= 1<<EXTI2;
 8000310:	4b05      	ldr	r3, [pc, #20]	; (8000328 <EXTI2_IRQHandler+0x1c>)
 8000312:	695b      	ldr	r3, [r3, #20]
 8000314:	4a04      	ldr	r2, [pc, #16]	; (8000328 <EXTI2_IRQHandler+0x1c>)
 8000316:	f043 0304 	orr.w	r3, r3, #4
 800031a:	6153      	str	r3, [r2, #20]
	GP_IRQ[2]();
 800031c:	4b03      	ldr	r3, [pc, #12]	; (800032c <EXTI2_IRQHandler+0x20>)
 800031e:	689b      	ldr	r3, [r3, #8]
 8000320:	4798      	blx	r3
}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40010400 	.word	0x40010400
 800032c:	2000001c 	.word	0x2000001c

08000330 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	// While Execution this function Means that NVIC Receive Ack signal from CPU
	// Disable Pending Request From EXTI Peripheral And Calling Your Provided Function
	EXTI->PR |= 1<<EXTI3;
 8000334:	4b05      	ldr	r3, [pc, #20]	; (800034c <EXTI3_IRQHandler+0x1c>)
 8000336:	695b      	ldr	r3, [r3, #20]
 8000338:	4a04      	ldr	r2, [pc, #16]	; (800034c <EXTI3_IRQHandler+0x1c>)
 800033a:	f043 0308 	orr.w	r3, r3, #8
 800033e:	6153      	str	r3, [r2, #20]
	GP_IRQ[3]();
 8000340:	4b03      	ldr	r3, [pc, #12]	; (8000350 <EXTI3_IRQHandler+0x20>)
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	4798      	blx	r3
}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40010400 	.word	0x40010400
 8000350:	2000001c 	.word	0x2000001c

08000354 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	// While Execution this function Means that NVIC Receive Ack signal from CPU
	// Disable Pending Request From EXTI Peripheral And Calling Your Provided Function
	EXTI->PR |= 1<<EXTI4;
 8000358:	4b05      	ldr	r3, [pc, #20]	; (8000370 <EXTI4_IRQHandler+0x1c>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	4a04      	ldr	r2, [pc, #16]	; (8000370 <EXTI4_IRQHandler+0x1c>)
 800035e:	f043 0310 	orr.w	r3, r3, #16
 8000362:	6153      	str	r3, [r2, #20]
	GP_IRQ[4]();
 8000364:	4b03      	ldr	r3, [pc, #12]	; (8000374 <EXTI4_IRQHandler+0x20>)
 8000366:	691b      	ldr	r3, [r3, #16]
 8000368:	4798      	blx	r3
}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40010400 	.word	0x40010400
 8000374:	2000001c 	.word	0x2000001c

08000378 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	// While Execution this function Means that NVIC Receive Ack signal from CPU
	// Disable Pending Request From EXTI Peripheral And Calling Your Provided Function
	if (EXTI->PR & 1<<5){	EXTI->PR |= 1<<EXTI5;	GP_IRQ[5]();}
 800037c:	4b26      	ldr	r3, [pc, #152]	; (8000418 <EXTI9_5_IRQHandler+0xa0>)
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	f003 0320 	and.w	r3, r3, #32
 8000384:	2b00      	cmp	r3, #0
 8000386:	d008      	beq.n	800039a <EXTI9_5_IRQHandler+0x22>
 8000388:	4b23      	ldr	r3, [pc, #140]	; (8000418 <EXTI9_5_IRQHandler+0xa0>)
 800038a:	695b      	ldr	r3, [r3, #20]
 800038c:	4a22      	ldr	r2, [pc, #136]	; (8000418 <EXTI9_5_IRQHandler+0xa0>)
 800038e:	f043 0320 	orr.w	r3, r3, #32
 8000392:	6153      	str	r3, [r2, #20]
 8000394:	4b21      	ldr	r3, [pc, #132]	; (800041c <EXTI9_5_IRQHandler+0xa4>)
 8000396:	695b      	ldr	r3, [r3, #20]
 8000398:	4798      	blx	r3
	if (EXTI->PR & 1<<6){	EXTI->PR |= 1<<EXTI6;	GP_IRQ[6]();}
 800039a:	4b1f      	ldr	r3, [pc, #124]	; (8000418 <EXTI9_5_IRQHandler+0xa0>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d008      	beq.n	80003b8 <EXTI9_5_IRQHandler+0x40>
 80003a6:	4b1c      	ldr	r3, [pc, #112]	; (8000418 <EXTI9_5_IRQHandler+0xa0>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	4a1b      	ldr	r2, [pc, #108]	; (8000418 <EXTI9_5_IRQHandler+0xa0>)
 80003ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003b0:	6153      	str	r3, [r2, #20]
 80003b2:	4b1a      	ldr	r3, [pc, #104]	; (800041c <EXTI9_5_IRQHandler+0xa4>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	4798      	blx	r3
	if (EXTI->PR & 1<<7){	EXTI->PR |= 1<<EXTI7;	GP_IRQ[7]();}
 80003b8:	4b17      	ldr	r3, [pc, #92]	; (8000418 <EXTI9_5_IRQHandler+0xa0>)
 80003ba:	695b      	ldr	r3, [r3, #20]
 80003bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d008      	beq.n	80003d6 <EXTI9_5_IRQHandler+0x5e>
 80003c4:	4b14      	ldr	r3, [pc, #80]	; (8000418 <EXTI9_5_IRQHandler+0xa0>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	4a13      	ldr	r2, [pc, #76]	; (8000418 <EXTI9_5_IRQHandler+0xa0>)
 80003ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ce:	6153      	str	r3, [r2, #20]
 80003d0:	4b12      	ldr	r3, [pc, #72]	; (800041c <EXTI9_5_IRQHandler+0xa4>)
 80003d2:	69db      	ldr	r3, [r3, #28]
 80003d4:	4798      	blx	r3
	if (EXTI->PR & 1<<8){	EXTI->PR |= 1<<EXTI8;	GP_IRQ[8]();}
 80003d6:	4b10      	ldr	r3, [pc, #64]	; (8000418 <EXTI9_5_IRQHandler+0xa0>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d008      	beq.n	80003f4 <EXTI9_5_IRQHandler+0x7c>
 80003e2:	4b0d      	ldr	r3, [pc, #52]	; (8000418 <EXTI9_5_IRQHandler+0xa0>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	4a0c      	ldr	r2, [pc, #48]	; (8000418 <EXTI9_5_IRQHandler+0xa0>)
 80003e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003ec:	6153      	str	r3, [r2, #20]
 80003ee:	4b0b      	ldr	r3, [pc, #44]	; (800041c <EXTI9_5_IRQHandler+0xa4>)
 80003f0:	6a1b      	ldr	r3, [r3, #32]
 80003f2:	4798      	blx	r3
	if (EXTI->PR & 1<<9){	EXTI->PR |= 1<<EXTI9;	GP_IRQ[9]();}
 80003f4:	4b08      	ldr	r3, [pc, #32]	; (8000418 <EXTI9_5_IRQHandler+0xa0>)
 80003f6:	695b      	ldr	r3, [r3, #20]
 80003f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d008      	beq.n	8000412 <EXTI9_5_IRQHandler+0x9a>
 8000400:	4b05      	ldr	r3, [pc, #20]	; (8000418 <EXTI9_5_IRQHandler+0xa0>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	4a04      	ldr	r2, [pc, #16]	; (8000418 <EXTI9_5_IRQHandler+0xa0>)
 8000406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800040a:	6153      	str	r3, [r2, #20]
 800040c:	4b03      	ldr	r3, [pc, #12]	; (800041c <EXTI9_5_IRQHandler+0xa4>)
 800040e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000410:	4798      	blx	r3
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40010400 	.word	0x40010400
 800041c:	2000001c 	.word	0x2000001c

08000420 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	// While Execution this function Means that NVIC Receive Ack signal from CPU
	// Disable Pending Request From EXTI Peripheral And Calling Your Provided Function
	if (EXTI->PR & 1<<10){	EXTI->PR |= 1<<EXTI10;	GP_IRQ[10]();}
 8000424:	4b2d      	ldr	r3, [pc, #180]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800042c:	2b00      	cmp	r3, #0
 800042e:	d008      	beq.n	8000442 <EXTI15_10_IRQHandler+0x22>
 8000430:	4b2a      	ldr	r3, [pc, #168]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 8000432:	695b      	ldr	r3, [r3, #20]
 8000434:	4a29      	ldr	r2, [pc, #164]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 8000436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800043a:	6153      	str	r3, [r2, #20]
 800043c:	4b28      	ldr	r3, [pc, #160]	; (80004e0 <EXTI15_10_IRQHandler+0xc0>)
 800043e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000440:	4798      	blx	r3
	if (EXTI->PR & 1<<11){	EXTI->PR |= 1<<EXTI11;	GP_IRQ[11]();}
 8000442:	4b26      	ldr	r3, [pc, #152]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800044a:	2b00      	cmp	r3, #0
 800044c:	d008      	beq.n	8000460 <EXTI15_10_IRQHandler+0x40>
 800044e:	4b23      	ldr	r3, [pc, #140]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	4a22      	ldr	r2, [pc, #136]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 8000454:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000458:	6153      	str	r3, [r2, #20]
 800045a:	4b21      	ldr	r3, [pc, #132]	; (80004e0 <EXTI15_10_IRQHandler+0xc0>)
 800045c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800045e:	4798      	blx	r3
	if (EXTI->PR & 1<<12){	EXTI->PR |= 1<<EXTI12;	GP_IRQ[12]();}
 8000460:	4b1e      	ldr	r3, [pc, #120]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 8000462:	695b      	ldr	r3, [r3, #20]
 8000464:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000468:	2b00      	cmp	r3, #0
 800046a:	d008      	beq.n	800047e <EXTI15_10_IRQHandler+0x5e>
 800046c:	4b1b      	ldr	r3, [pc, #108]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 800046e:	695b      	ldr	r3, [r3, #20]
 8000470:	4a1a      	ldr	r2, [pc, #104]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 8000472:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000476:	6153      	str	r3, [r2, #20]
 8000478:	4b19      	ldr	r3, [pc, #100]	; (80004e0 <EXTI15_10_IRQHandler+0xc0>)
 800047a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047c:	4798      	blx	r3
	if (EXTI->PR & 1<<13){	EXTI->PR |= 1<<EXTI13;	GP_IRQ[13]();}
 800047e:	4b17      	ldr	r3, [pc, #92]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000486:	2b00      	cmp	r3, #0
 8000488:	d008      	beq.n	800049c <EXTI15_10_IRQHandler+0x7c>
 800048a:	4b14      	ldr	r3, [pc, #80]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	4a13      	ldr	r2, [pc, #76]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 8000490:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000494:	6153      	str	r3, [r2, #20]
 8000496:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <EXTI15_10_IRQHandler+0xc0>)
 8000498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800049a:	4798      	blx	r3
	if (EXTI->PR & 1<<14){	EXTI->PR |= 1<<EXTI14;	GP_IRQ[14]();}
 800049c:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 800049e:	695b      	ldr	r3, [r3, #20]
 80004a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d008      	beq.n	80004ba <EXTI15_10_IRQHandler+0x9a>
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 80004aa:	695b      	ldr	r3, [r3, #20]
 80004ac:	4a0b      	ldr	r2, [pc, #44]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 80004ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004b2:	6153      	str	r3, [r2, #20]
 80004b4:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <EXTI15_10_IRQHandler+0xc0>)
 80004b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004b8:	4798      	blx	r3
	if (EXTI->PR & 1<<15){	EXTI->PR |= 1<<EXTI15;	GP_IRQ[15]();}
 80004ba:	4b08      	ldr	r3, [pc, #32]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d008      	beq.n	80004d8 <EXTI15_10_IRQHandler+0xb8>
 80004c6:	4b05      	ldr	r3, [pc, #20]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	4a04      	ldr	r2, [pc, #16]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 80004cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004d0:	6153      	str	r3, [r2, #20]
 80004d2:	4b03      	ldr	r3, [pc, #12]	; (80004e0 <EXTI15_10_IRQHandler+0xc0>)
 80004d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004d6:	4798      	blx	r3
}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	40010400 	.word	0x40010400
 80004e0:	2000001c 	.word	0x2000001c

080004e4 <GetPos>:
							/*************************************/
							/*       Function Definition         */
							/*************************************/

uint8_t GetPos(PINy_t PinNumber)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 80004ee:	88fb      	ldrh	r3, [r7, #6]
 80004f0:	2b80      	cmp	r3, #128	; 0x80
 80004f2:	d042      	beq.n	800057a <GetPos+0x96>
 80004f4:	2b80      	cmp	r3, #128	; 0x80
 80004f6:	dc11      	bgt.n	800051c <GetPos+0x38>
 80004f8:	2b08      	cmp	r3, #8
 80004fa:	d036      	beq.n	800056a <GetPos+0x86>
 80004fc:	2b08      	cmp	r3, #8
 80004fe:	dc06      	bgt.n	800050e <GetPos+0x2a>
 8000500:	2b02      	cmp	r3, #2
 8000502:	d02e      	beq.n	8000562 <GetPos+0x7e>
 8000504:	2b04      	cmp	r3, #4
 8000506:	d02e      	beq.n	8000566 <GetPos+0x82>
 8000508:	2b01      	cmp	r3, #1
 800050a:	d028      	beq.n	800055e <GetPos+0x7a>
 800050c:	e037      	b.n	800057e <GetPos+0x9a>
 800050e:	2b20      	cmp	r3, #32
 8000510:	d02f      	beq.n	8000572 <GetPos+0x8e>
 8000512:	2b40      	cmp	r3, #64	; 0x40
 8000514:	d02f      	beq.n	8000576 <GetPos+0x92>
 8000516:	2b10      	cmp	r3, #16
 8000518:	d029      	beq.n	800056e <GetPos+0x8a>
 800051a:	e030      	b.n	800057e <GetPos+0x9a>
 800051c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000520:	d023      	beq.n	800056a <GetPos+0x86>
 8000522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000526:	dc09      	bgt.n	800053c <GetPos+0x58>
 8000528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800052c:	d019      	beq.n	8000562 <GetPos+0x7e>
 800052e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000532:	d018      	beq.n	8000566 <GetPos+0x82>
 8000534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000538:	d011      	beq.n	800055e <GetPos+0x7a>
 800053a:	e020      	b.n	800057e <GetPos+0x9a>
 800053c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000540:	d017      	beq.n	8000572 <GetPos+0x8e>
 8000542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000546:	dc03      	bgt.n	8000550 <GetPos+0x6c>
 8000548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800054c:	d00f      	beq.n	800056e <GetPos+0x8a>
 800054e:	e016      	b.n	800057e <GetPos+0x9a>
 8000550:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000554:	d00f      	beq.n	8000576 <GetPos+0x92>
 8000556:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800055a:	d00e      	beq.n	800057a <GetPos+0x96>
 800055c:	e00f      	b.n	800057e <GetPos+0x9a>
	{
	case GPIO_PIN0 :
	case GPIO_PIN8 :
		return 0; break;
 800055e:	2300      	movs	r3, #0
 8000560:	e00e      	b.n	8000580 <GetPos+0x9c>
	case GPIO_PIN1 :
	case GPIO_PIN9 :
		return 4; break;
 8000562:	2304      	movs	r3, #4
 8000564:	e00c      	b.n	8000580 <GetPos+0x9c>
	case GPIO_PIN2 :
	case GPIO_PIN10:
		return 8; break;
 8000566:	2308      	movs	r3, #8
 8000568:	e00a      	b.n	8000580 <GetPos+0x9c>
	case GPIO_PIN3 :
	case GPIO_PIN11:
		return 12; break;
 800056a:	230c      	movs	r3, #12
 800056c:	e008      	b.n	8000580 <GetPos+0x9c>
	case GPIO_PIN4 :
	case GPIO_PIN12:
		return 16; break;
 800056e:	2310      	movs	r3, #16
 8000570:	e006      	b.n	8000580 <GetPos+0x9c>
	case GPIO_PIN5 :
	case GPIO_PIN13:
		return 20; break;
 8000572:	2314      	movs	r3, #20
 8000574:	e004      	b.n	8000580 <GetPos+0x9c>
	case GPIO_PIN6 :
	case GPIO_PIN14:
		return 24; break;
 8000576:	2318      	movs	r3, #24
 8000578:	e002      	b.n	8000580 <GetPos+0x9c>
	case GPIO_PIN7 :
	case GPIO_PIN15:
		return 28; break;
 800057a:	231c      	movs	r3, #28
 800057c:	e000      	b.n	8000580 <GetPos+0x9c>
	default :
		return 0; break;
 800057e:	2300      	movs	r3, #0
	}
}
 8000580:	4618      	mov	r0, r3
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr

0800058a <GPIO_INIT>:

void GPIO_INIT(GPIO_PinConfig_t *myPin)
{
 800058a:	b590      	push	{r4, r7, lr}
 800058c:	b085      	sub	sp, #20
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
	volatile uint32_t *configReg = NULL;
 8000592:	2300      	movs	r3, #0
 8000594:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_Config = 0x0;
 8000596:	2300      	movs	r3, #0
 8000598:	73fb      	strb	r3, [r7, #15]
	configReg = (myPin->GPIO_PinNumber < GPIO_PIN8) ? (&(myPin->GPIOx->CRL)) : (&(myPin->GPIOx->CRH));
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	889b      	ldrh	r3, [r3, #4]
 800059e:	2bff      	cmp	r3, #255	; 0xff
 80005a0:	d802      	bhi.n	80005a8 <GPIO_INIT+0x1e>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	e002      	b.n	80005ae <GPIO_INIT+0x24>
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	3304      	adds	r3, #4
 80005ae:	60bb      	str	r3, [r7, #8]
	// Clear CNF0[1:0] MODE0[1:0]
	(*configReg) &= ~(0xF << GetPos(myPin->GPIO_PinNumber));
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	889b      	ldrh	r3, [r3, #4]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff ff95 	bl	80004e4 <GetPos>
 80005ba:	4603      	mov	r3, r0
 80005bc:	461a      	mov	r2, r3
 80005be:	230f      	movs	r3, #15
 80005c0:	4093      	lsls	r3, r2
 80005c2:	43da      	mvns	r2, r3
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	401a      	ands	r2, r3
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	601a      	str	r2, [r3, #0]

	if ( (myPin->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (myPin->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (myPin->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (myPin->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	799b      	ldrb	r3, [r3, #6]
 80005d2:	2b07      	cmp	r3, #7
 80005d4:	d00b      	beq.n	80005ee <GPIO_INIT+0x64>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	799b      	ldrb	r3, [r3, #6]
 80005da:	2b06      	cmp	r3, #6
 80005dc:	d007      	beq.n	80005ee <GPIO_INIT+0x64>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	799b      	ldrb	r3, [r3, #6]
 80005e2:	2b05      	cmp	r3, #5
 80005e4:	d003      	beq.n	80005ee <GPIO_INIT+0x64>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	799b      	ldrb	r3, [r3, #6]
 80005ea:	2b04      	cmp	r3, #4
 80005ec:	d10e      	bne.n	800060c <GPIO_INIT+0x82>
	{
		// Set CNF0[1:0] -> (his mode)  MODE0[1:0] -> 00
		Pin_Config = ((((myPin->GPIO_MODE - 4) << 2) | (myPin->GPIO_OUTPUT_Speed)) & 0x0F);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	799b      	ldrb	r3, [r3, #6]
 80005f2:	3b04      	subs	r3, #4
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	b25a      	sxtb	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	79db      	ldrb	r3, [r3, #7]
 80005fc:	b25b      	sxtb	r3, r3
 80005fe:	4313      	orrs	r3, r2
 8000600:	b25b      	sxtb	r3, r3
 8000602:	b2db      	uxtb	r3, r3
 8000604:	f003 030f 	and.w	r3, r3, #15
 8000608:	73fb      	strb	r3, [r7, #15]
 800060a:	e030      	b.n	800066e <GPIO_INIT+0xe4>
	}
	else
	{
		if (myPin->GPIO_MODE == GPIO_MODE_INPUT_AF) // Considered input Floating
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	799b      	ldrb	r3, [r3, #6]
 8000610:	2b08      	cmp	r3, #8
 8000612:	d102      	bne.n	800061a <GPIO_INIT+0x90>
		{
			Pin_Config = ((GPIO_MODE_INPUT_FLO << 2 | 0x0) & 0x0F);
 8000614:	2304      	movs	r3, #4
 8000616:	73fb      	strb	r3, [r7, #15]
 8000618:	e029      	b.n	800066e <GPIO_INIT+0xe4>
		}
		else if (myPin->GPIO_MODE == GPIO_MODE_INPUT_PU)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	799b      	ldrb	r3, [r3, #6]
 800061e:	2b02      	cmp	r3, #2
 8000620:	d10c      	bne.n	800063c <GPIO_INIT+0xb2>
		{
			Pin_Config = ((GPIO_MODE_INPUT_PU << 2 | 0x0) & 0x0F);
 8000622:	2308      	movs	r3, #8
 8000624:	73fb      	strb	r3, [r7, #15]
			//From Table 20. Port bit configuration table-> Set ODR->1 to set pin as Input Pull Up
			myPin->GPIOx->ODR |= (myPin->GPIO_PinNumber);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	68da      	ldr	r2, [r3, #12]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	889b      	ldrh	r3, [r3, #4]
 8000630:	4619      	mov	r1, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	430a      	orrs	r2, r1
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	e018      	b.n	800066e <GPIO_INIT+0xe4>
		}
		else if (myPin->GPIO_MODE == GPIO_MODE_INPUT_PD)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	799b      	ldrb	r3, [r3, #6]
 8000640:	2b03      	cmp	r3, #3
 8000642:	d10d      	bne.n	8000660 <GPIO_INIT+0xd6>
		{
			Pin_Config = ((GPIO_MODE_INPUT_PU << 2) & 0x0F);
 8000644:	2308      	movs	r3, #8
 8000646:	73fb      	strb	r3, [r7, #15]
			//From Table 20. Port bit configuration table-> Set ODR->0 to set pin as Input Pull Down
			myPin->GPIOx->ODR &= ~(myPin->GPIO_PinNumber);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	68da      	ldr	r2, [r3, #12]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	889b      	ldrh	r3, [r3, #4]
 8000652:	43db      	mvns	r3, r3
 8000654:	4619      	mov	r1, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	400a      	ands	r2, r1
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	e006      	b.n	800066e <GPIO_INIT+0xe4>
		}
		else
		{
			Pin_Config = ((myPin->GPIO_MODE << 2 | 0x0) & 0x0F);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	799b      	ldrb	r3, [r3, #6]
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	b2db      	uxtb	r3, r3
 8000668:	f003 030f 	and.w	r3, r3, #15
 800066c:	73fb      	strb	r3, [r7, #15]
		}
	}
	// Writing on CRL OR CRH Reg
	(*configReg) |= ((Pin_Config) << GetPos(myPin->GPIO_PinNumber));
 800066e:	7bfc      	ldrb	r4, [r7, #15]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	889b      	ldrh	r3, [r3, #4]
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ff35 	bl	80004e4 <GetPos>
 800067a:	4603      	mov	r3, r0
 800067c:	fa04 f203 	lsl.w	r2, r4, r3
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	431a      	orrs	r2, r3
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	601a      	str	r2, [r3, #0]
}
 800068a:	bf00      	nop
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	bd90      	pop	{r4, r7, pc}
	...

08000694 <I2C_INIT>:
static void Master_Transmit_Address(I2C * hi2c, unsigned int DevAddress ,AddressMode Mode, W_R COMMAND);



void I2C_INIT(I2C * hi2c)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	unsigned int CCR, PCLK = 0, FREQ = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
 80006a0:	2300      	movs	r3, #0
 80006a2:	613b      	str	r3, [r7, #16]


	GPIO_PINS_INIT(hi2c->I2Cx);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 f9e3 	bl	8000a74 <GPIO_PINS_INIT>

	// Disable Peripheral
	CLEAR_BIT(hi2c->I2Cx->CR1, PE_BIT_Pos);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f022 0201 	bic.w	r2, r2, #1
 80006bc:	601a      	str	r2, [r3, #0]



	/************************************** CR1 Reg **************************************/
	if (hi2c->SCL_Streach_EN == ENABLE)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	7b1b      	ldrb	r3, [r3, #12]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d108      	bne.n	80006d8 <I2C_INIT+0x44>
		CLEAR_BIT(hi2c->I2Cx->CR1, NOSTRETCH_BIT_POS);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	e00b      	b.n	80006f0 <I2C_INIT+0x5c>
	else if (hi2c->SCL_Streach_EN == DISABLE)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	7b1b      	ldrb	r3, [r3, #12]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d107      	bne.n	80006f0 <I2C_INIT+0x5c>
		SET_BIT(hi2c->I2Cx->CR1, NOSTRETCH_BIT_POS);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006ee:	601a      	str	r2, [r3, #0]


	/************************************** CR2 Reg **************************************/
	PCLK = RCC_GetPCLK1Freq();
 80006f0:	f000 fae0 	bl	8000cb4 <RCC_GetPCLK1Freq>
 80006f4:	6178      	str	r0, [r7, #20]
	FREQ = PCLK / 1000000;
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	4a5d      	ldr	r2, [pc, #372]	; (8000870 <I2C_INIT+0x1dc>)
 80006fa:	fba2 2303 	umull	r2, r3, r2, r3
 80006fe:	0c9b      	lsrs	r3, r3, #18
 8000700:	613b      	str	r3, [r7, #16]
	// Min CLOCK = 2MHz to EN I2C
	if (FREQ < 2) return;
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	2b01      	cmp	r3, #1
 8000706:	f240 80ae 	bls.w	8000866 <I2C_INIT+0x1d2>

	// Clearin FREQ Bits
	hi2c->I2Cx->CR2 &= ~(0b111111 << FREQ_BITS_Pos);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	685a      	ldr	r2, [r3, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8000718:	605a      	str	r2, [r3, #4]
	// Set FREQ OF SCL
	hi2c->I2Cx->CR2 |= FREQ << FREQ_BITS_Pos;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	6859      	ldr	r1, [r3, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	693a      	ldr	r2, [r7, #16]
 8000726:	430a      	orrs	r2, r1
 8000728:	605a      	str	r2, [r3, #4]

	if (hi2c->IRQ_EN == DISABLE)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	7b5b      	ldrb	r3, [r3, #13]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d117      	bne.n	8000762 <I2C_INIT+0xce>
	{
		// Disable IRQ
		CLEAR_BIT(hi2c->I2Cx->CR2, ITERREN_BIT_Pos);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	685a      	ldr	r2, [r3, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000740:	605a      	str	r2, [r3, #4]
		CLEAR_BIT(hi2c->I2Cx->CR2, ITEVTEN_BIT_Pos);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	685a      	ldr	r2, [r3, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000750:	605a      	str	r2, [r3, #4]
		CLEAR_BIT(hi2c->I2Cx->CR2, ITBUFEN_BIT_Pos);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	685a      	ldr	r2, [r3, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000760:	605a      	str	r2, [r3, #4]
	/************************************** OAR1 Reg **************************************/
	/**************************************    &&    **************************************/
	/************************************** OAR2 Reg **************************************/

	// Init 7 Bit or 10 Bit Address in Slave Mode
	if (hi2c->Add_Mode == _7BIT_ADD)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	7b9b      	ldrb	r3, [r3, #14]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d12a      	bne.n	80007c0 <I2C_INIT+0x12c>
	{
		CLEAR_BIT(hi2c->I2Cx->OAR1, ADD_MODE_BIT_POS);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	689a      	ldr	r2, [r3, #8]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000778:	609a      	str	r2, [r3, #8]
		hi2c->I2Cx->OAR1 |= ( (hi2c->OwnAddress1 & 0x7F) << ADD_1_7_BITS_POS);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	6899      	ldr	r1, [r3, #8]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	691b      	ldr	r3, [r3, #16]
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	b2da      	uxtb	r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	430a      	orrs	r2, r1
 800078e:	609a      	str	r2, [r3, #8]
		if (hi2c->Dual_EN == ENABLE)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	7d1b      	ldrb	r3, [r3, #20]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d12a      	bne.n	80007ee <I2C_INIT+0x15a>
		/* Set Dual Address  for 7 Bit Addressing Only*/
		{
			SET_BIT(hi2c->I2Cx->OAR2, ENDUAL_BIT_POS);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	68da      	ldr	r2, [r3, #12]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f042 0201 	orr.w	r2, r2, #1
 80007a6:	60da      	str	r2, [r3, #12]
			hi2c->I2Cx->OAR2 |= ( (hi2c->OwnAddress2 & 0x7F) << ADD2_BITS_POS);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	68d9      	ldr	r1, [r3, #12]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	430a      	orrs	r2, r1
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	e016      	b.n	80007ee <I2C_INIT+0x15a>
		}
	}
	else if (hi2c->Add_Mode == _10BIT_ADD)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	7b9b      	ldrb	r3, [r3, #14]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d112      	bne.n	80007ee <I2C_INIT+0x15a>
	{
		SET_BIT(hi2c->I2Cx->OAR1, ADD_MODE_BIT_POS);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	689a      	ldr	r2, [r3, #8]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80007d6:	609a      	str	r2, [r3, #8]
		hi2c->I2Cx->OAR1 |= ( (hi2c->OwnAddress1 & 0x3FF) << ADD_10_BITS_POS);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	6899      	ldr	r1, [r3, #8]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	691b      	ldr	r3, [r3, #16]
 80007e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	430a      	orrs	r2, r1
 80007ec:	609a      	str	r2, [r3, #8]
	}

	/************************************** CRR Reg **************************************/
	if (hi2c->SF_Mode == FM_MODE)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	791b      	ldrb	r3, [r3, #4]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d108      	bne.n	8000808 <I2C_INIT+0x174>
	{
		SET_BIT(hi2c->I2Cx->CCR, F_S_BIT_Pos);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	69da      	ldr	r2, [r3, #28]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000804:	61da      	str	r2, [r3, #28]
 8000806:	e01c      	b.n	8000842 <I2C_INIT+0x1ae>
		// To Do Init
	}
	else if (hi2c->SF_Mode == SM_MODE)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	791b      	ldrb	r3, [r3, #4]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d118      	bne.n	8000842 <I2C_INIT+0x1ae>
	{
		CLEAR_BIT(hi2c->I2Cx->CCR, F_S_BIT_Pos);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	69da      	ldr	r2, [r3, #28]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800081e:	61da      	str	r2, [r3, #28]
		CCR = PCLK/( 2 * hi2c->SCL_Speed);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	689b      	ldr	r3, [r3, #8]
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	697a      	ldr	r2, [r7, #20]
 8000828:	fbb2 f3f3 	udiv	r3, r2, r3
 800082c:	60fb      	str	r3, [r7, #12]
		hi2c->I2Cx->CCR |= ((CCR & 0x1FF) << CRR_BITS_Pos);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	69d9      	ldr	r1, [r3, #28]
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	430a      	orrs	r2, r1
 8000840:	61da      	str	r2, [r3, #28]
	}

	/************************************** TRISE Reg **************************************/

	hi2c->I2Cx->TRISE |= ( (FREQ + 1) << TRISE_BITS_Pos);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	6a19      	ldr	r1, [r3, #32]
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	1c5a      	adds	r2, r3, #1
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	430a      	orrs	r2, r1
 8000852:	621a      	str	r2, [r3, #32]

	// Enable Peripheral
	SET_BIT(hi2c->I2Cx->CR1, PE_BIT_Pos);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f042 0201 	orr.w	r2, r2, #1
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	e000      	b.n	8000868 <I2C_INIT+0x1d4>
	if (FREQ < 2) return;
 8000866:	bf00      	nop
}
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	431bde83 	.word	0x431bde83

08000874 <I2C_Master_Transmit>:

	if ( (IRQ_Activate & ERROR_IRQ_EN) == ERROR_IRQ_EN) SET_BIT(hi2c->I2Cx->CR2, ITBUFEN_BIT_Pos);
}

void I2C_Master_Transmit(I2C * hi2c, unsigned int DevAddress, SS_State *Start_Stop,AddressMode Mode, unsigned char *payload, unsigned int lenght)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
 8000880:	70fb      	strb	r3, [r7, #3]
	// Temp VAR
	volatile unsigned int dummy_reg;

	// Check if The Peripheral in Disable or Enable
	if (!READ_BIT(hi2c->I2Cx->CR1, PE_BIT_Pos))
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f003 0301 	and.w	r3, r3, #1
 800088c:	2b00      	cmp	r3, #0
 800088e:	d107      	bne.n	80008a0 <I2C_Master_Transmit+0x2c>
	{
		// Enable Peripheral
		SET_BIT(hi2c->I2Cx->CR1, PE_BIT_Pos);
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f042 0201 	orr.w	r2, r2, #1
 800089e:	601a      	str	r2, [r3, #0]
	}

	/***************************** Start of First State **********************************/
	// Generate Start
	Generate_START(hi2c, Start_Stop->START_Cond);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	4619      	mov	r1, r3
 80008a6:	68f8      	ldr	r0, [r7, #12]
 80008a8:	f000 f934 	bl	8000b14 <Generate_START>
	// Polling Untill Start Send
	while (!READ_BIT(hi2c->I2Cx->SR1, SB_BIT_Pos));
 80008ac:	bf00      	nop
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	695b      	ldr	r3, [r3, #20]
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d0f8      	beq.n	80008ae <I2C_Master_Transmit+0x3a>

	/******************************* Start of Second State *******************************/
	// Clearing SB Bit
	// Reading SR1
	// Writing on DR Reg with Data
	dummy_reg = hi2c->I2Cx->SR1;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	613b      	str	r3, [r7, #16]

	Master_Transmit_Address(hi2c, DevAddress, Mode, WRITE);
 80008c4:	78fa      	ldrb	r2, [r7, #3]
 80008c6:	2300      	movs	r3, #0
 80008c8:	68b9      	ldr	r1, [r7, #8]
 80008ca:	68f8      	ldr	r0, [r7, #12]
 80008cc:	f000 f941 	bl	8000b52 <Master_Transmit_Address>

	// Polling Untill Address Send
	while (!READ_BIT(hi2c->I2Cx->SR1, ADDR_BIT_Pos));
 80008d0:	bf00      	nop
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	695b      	ldr	r3, [r3, #20]
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d0f7      	beq.n	80008d2 <I2C_Master_Transmit+0x5e>

	/******************************* Start of Third State *******************************/
	// 									Send Data

	// Clear ADDR Bit Reading Both SR1,SR2 Reg
	dummy_reg = hi2c->I2Cx->SR1 | hi2c->I2Cx->SR2;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	695a      	ldr	r2, [r3, #20]
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	613b      	str	r3, [r7, #16]

	for (unsigned int Counter = 0; Counter < lenght; Counter++)
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
 80008f6:	e012      	b.n	800091e <I2C_Master_Transmit+0xaa>
	{
		while(!READ_BIT(hi2c->I2Cx->SR1, TxE_BIT_Pos));
 80008f8:	bf00      	nop
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	695b      	ldr	r3, [r3, #20]
 8000900:	09db      	lsrs	r3, r3, #7
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	2b00      	cmp	r3, #0
 8000908:	d0f7      	beq.n	80008fa <I2C_Master_Transmit+0x86>
		hi2c->I2Cx->DR = payload[Counter];
 800090a:	6a3a      	ldr	r2, [r7, #32]
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	4413      	add	r3, r2
 8000910:	781a      	ldrb	r2, [r3, #0]
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	611a      	str	r2, [r3, #16]
	for (unsigned int Counter = 0; Counter < lenght; Counter++)
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	3301      	adds	r3, #1
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	697a      	ldr	r2, [r7, #20]
 8000920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000922:	429a      	cmp	r2, r3
 8000924:	d3e8      	bcc.n	80008f8 <I2C_Master_Transmit+0x84>
	/******************************* End of Third State **********************************/


	/******************************* Start of Fourth State *******************************/

	if (Start_Stop->STOP_Cond == WithSTOP)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	785b      	ldrb	r3, [r3, #1]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d111      	bne.n	8000952 <I2C_Master_Transmit+0xde>
	{
		// Polling on Last EVENT
		while ( !READ_BIT(hi2c->I2Cx->SR1, TxE_BIT_Pos) );
 800092e:	bf00      	nop
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	09db      	lsrs	r3, r3, #7
 8000938:	f003 0301 	and.w	r3, r3, #1
 800093c:	2b00      	cmp	r3, #0
 800093e:	d0f7      	beq.n	8000930 <I2C_Master_Transmit+0xbc>
		while ( !READ_BIT(hi2c->I2Cx->SR1, BTF_BIT_Pos) );
 8000940:	bf00      	nop
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	089b      	lsrs	r3, r3, #2
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	2b00      	cmp	r3, #0
 8000950:	d0f7      	beq.n	8000942 <I2C_Master_Transmit+0xce>
	}

	Generate_STOP(hi2c, Start_Stop->STOP_Cond);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	785b      	ldrb	r3, [r3, #1]
 8000956:	4619      	mov	r1, r3
 8000958:	68f8      	ldr	r0, [r7, #12]
 800095a:	f000 f97f 	bl	8000c5c <Generate_STOP>


	/******************************* End of Foruth State   *******************************/


}
 800095e:	bf00      	nop
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <I2C_Master_Recieve>:


void I2C_Master_Recieve(I2C * hi2c, unsigned int DevAddress, SS_State *Start_Stop,AddressMode Mode, unsigned char *payload, unsigned int lenght)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b086      	sub	sp, #24
 800096a:	af00      	add	r7, sp, #0
 800096c:	60f8      	str	r0, [r7, #12]
 800096e:	60b9      	str	r1, [r7, #8]
 8000970:	607a      	str	r2, [r7, #4]
 8000972:	70fb      	strb	r3, [r7, #3]
	// Temp VAR
	volatile unsigned int dummy_reg;

	// Enable ACK Bit
	SET_BIT(hi2c->I2Cx->CR1, ACK_BIT_POS);
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000982:	601a      	str	r2, [r3, #0]


	// Check if The Peripheral in Disable or Enable
	if (!READ_BIT(hi2c->I2Cx->CR1, PE_BIT_Pos))
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	2b00      	cmp	r3, #0
 8000990:	d107      	bne.n	80009a2 <I2C_Master_Recieve+0x3c>
	{
		// Enable Peripheral
		SET_BIT(hi2c->I2Cx->CR1, PE_BIT_Pos);
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f042 0201 	orr.w	r2, r2, #1
 80009a0:	601a      	str	r2, [r3, #0]
	}

	/***************************** Start of First State **********************************/
	// Generate Start
	Generate_START(hi2c, Start_Stop->START_Cond);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	4619      	mov	r1, r3
 80009a8:	68f8      	ldr	r0, [r7, #12]
 80009aa:	f000 f8b3 	bl	8000b14 <Generate_START>
	// Polling Untill Start Send
	while (!READ_BIT(hi2c->I2Cx->SR1, SB_BIT_Pos));
 80009ae:	bf00      	nop
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d0f8      	beq.n	80009b0 <I2C_Master_Recieve+0x4a>

	/******************************* Start of Second State *******************************/
	// Clearing SB Bit
	// Reading SR1
	// Writing on DR Reg with Data
	dummy_reg = hi2c->I2Cx->SR1;
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	695b      	ldr	r3, [r3, #20]
 80009c4:	613b      	str	r3, [r7, #16]

	Master_Transmit_Address(hi2c, DevAddress, Mode, READ);
 80009c6:	78fa      	ldrb	r2, [r7, #3]
 80009c8:	2301      	movs	r3, #1
 80009ca:	68b9      	ldr	r1, [r7, #8]
 80009cc:	68f8      	ldr	r0, [r7, #12]
 80009ce:	f000 f8c0 	bl	8000b52 <Master_Transmit_Address>

	// Polling Untill Address Send
	while (!READ_BIT(hi2c->I2Cx->SR1, ADDR_BIT_Pos));
 80009d2:	bf00      	nop
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	695b      	ldr	r3, [r3, #20]
 80009da:	085b      	lsrs	r3, r3, #1
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d0f7      	beq.n	80009d4 <I2C_Master_Recieve+0x6e>

	/******************************* Start of Third State *******************************/
	// 									Recieve Data

	// Clear ADDR Bit Reading Both SR1,SR2 Reg
	dummy_reg = hi2c->I2Cx->SR1 | hi2c->I2Cx->SR2;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	695a      	ldr	r2, [r3, #20]
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]

	for (unsigned int Counter = 0; Counter < (lenght-1); Counter++)
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	e013      	b.n	8000a22 <I2C_Master_Recieve+0xbc>
	{
		while(!READ_BIT(hi2c->I2Cx->SR1, 6));
 80009fa:	bf00      	nop
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	099b      	lsrs	r3, r3, #6
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d0f7      	beq.n	80009fc <I2C_Master_Recieve+0x96>
		payload[Counter] = hi2c->I2Cx->DR;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	6919      	ldr	r1, [r3, #16]
 8000a12:	6a3a      	ldr	r2, [r7, #32]
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	4413      	add	r3, r2
 8000a18:	b2ca      	uxtb	r2, r1
 8000a1a:	701a      	strb	r2, [r3, #0]
	for (unsigned int Counter = 0; Counter < (lenght-1); Counter++)
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a24:	3b01      	subs	r3, #1
 8000a26:	697a      	ldr	r2, [r7, #20]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d3e6      	bcc.n	80009fa <I2C_Master_Recieve+0x94>
	}

	// Disable ACK Bit (NACK)
	CLEAR_BIT(hi2c->I2Cx->CR1, ACK_BIT_POS);
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a3a:	601a      	str	r2, [r3, #0]

	// Recieve the data with NACK Sending
	while(!READ_BIT(hi2c->I2Cx->SR1, 6));
 8000a3c:	bf00      	nop
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	695b      	ldr	r3, [r3, #20]
 8000a44:	099b      	lsrs	r3, r3, #6
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d0f7      	beq.n	8000a3e <I2C_Master_Recieve+0xd8>
	payload[lenght-1] = hi2c->I2Cx->DR;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	6919      	ldr	r1, [r3, #16]
 8000a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a56:	3b01      	subs	r3, #1
 8000a58:	6a3a      	ldr	r2, [r7, #32]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	b2ca      	uxtb	r2, r1
 8000a5e:	701a      	strb	r2, [r3, #0]

	Generate_STOP(hi2c, Start_Stop->STOP_Cond);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	785b      	ldrb	r3, [r3, #1]
 8000a64:	4619      	mov	r1, r3
 8000a66:	68f8      	ldr	r0, [r7, #12]
 8000a68:	f000 f8f8 	bl	8000c5c <Generate_STOP>



}
 8000a6c:	bf00      	nop
 8000a6e:	3718      	adds	r7, #24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <GPIO_PINS_INIT>:




static void GPIO_PINS_INIT(I2C_Periphral *I2Cx)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]

	GPIO_PinConfig_t I2C_PINS;

	// Common Configuration between I2C1,I2C2
	I2C_PINS.GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	73fb      	strb	r3, [r7, #15]
	I2C_PINS.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000a80:	2307      	movs	r3, #7
 8000a82:	73bb      	strb	r3, [r7, #14]
	I2C_PINS.GPIOx = GPIOB;
 8000a84:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <GPIO_PINS_INIT+0x90>)
 8000a86:	60bb      	str	r3, [r7, #8]
	RCC_GPIOB_CLK_EN;
 8000a88:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <GPIO_PINS_INIT+0x94>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	4a1e      	ldr	r2, [pc, #120]	; (8000b08 <GPIO_PINS_INIT+0x94>)
 8000a8e:	f043 0308 	orr.w	r3, r3, #8
 8000a92:	6193      	str	r3, [r2, #24]
	if (I2Cx == I2C1)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a1d      	ldr	r2, [pc, #116]	; (8000b0c <GPIO_PINS_INIT+0x98>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d114      	bne.n	8000ac6 <GPIO_PINS_INIT+0x52>
	{
		// Enable Clock For I2C1
		RCC_I2C1_CLK_EN;
 8000a9c:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <GPIO_PINS_INIT+0x94>)
 8000a9e:	69db      	ldr	r3, [r3, #28]
 8000aa0:	4a19      	ldr	r2, [pc, #100]	; (8000b08 <GPIO_PINS_INIT+0x94>)
 8000aa2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aa6:	61d3      	str	r3, [r2, #28]

		// SCL : PB6
		I2C_PINS.GPIO_PinNumber = GPIO_PIN6;
 8000aa8:	2340      	movs	r3, #64	; 0x40
 8000aaa:	81bb      	strh	r3, [r7, #12]
		GPIO_INIT(&I2C_PINS);
 8000aac:	f107 0308 	add.w	r3, r7, #8
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff fd6a 	bl	800058a <GPIO_INIT>

		// SDA : PB7
		I2C_PINS.GPIO_PinNumber = GPIO_PIN7;
 8000ab6:	2380      	movs	r3, #128	; 0x80
 8000ab8:	81bb      	strh	r3, [r7, #12]
		GPIO_INIT(&I2C_PINS);
 8000aba:	f107 0308 	add.w	r3, r7, #8
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff fd63 	bl	800058a <GPIO_INIT>

		// SDA : PB7
		I2C_PINS.GPIO_PinNumber = GPIO_PIN11;
		GPIO_INIT(&I2C_PINS);
	}
}
 8000ac4:	e019      	b.n	8000afa <GPIO_PINS_INIT+0x86>
	else if (I2Cx == I2C2)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a11      	ldr	r2, [pc, #68]	; (8000b10 <GPIO_PINS_INIT+0x9c>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d115      	bne.n	8000afa <GPIO_PINS_INIT+0x86>
		RCC_I2C2_CLK_EN;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <GPIO_PINS_INIT+0x94>)
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	4a0d      	ldr	r2, [pc, #52]	; (8000b08 <GPIO_PINS_INIT+0x94>)
 8000ad4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ad8:	61d3      	str	r3, [r2, #28]
		I2C_PINS.GPIO_PinNumber = GPIO_PIN10;
 8000ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ade:	81bb      	strh	r3, [r7, #12]
		GPIO_INIT(&I2C_PINS);
 8000ae0:	f107 0308 	add.w	r3, r7, #8
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fd50 	bl	800058a <GPIO_INIT>
		I2C_PINS.GPIO_PinNumber = GPIO_PIN11;
 8000aea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000aee:	81bb      	strh	r3, [r7, #12]
		GPIO_INIT(&I2C_PINS);
 8000af0:	f107 0308 	add.w	r3, r7, #8
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fd48 	bl	800058a <GPIO_INIT>
}
 8000afa:	bf00      	nop
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40010c00 	.word	0x40010c00
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40005400 	.word	0x40005400
 8000b10:	40005800 	.word	0x40005800

08000b14 <Generate_START>:

static void Generate_START(I2C * hi2c, START_t START_Cond)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	70fb      	strb	r3, [r7, #3]

	if (START_Cond == START)
 8000b20:	78fb      	ldrb	r3, [r7, #3]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d108      	bne.n	8000b38 <Generate_START+0x24>
	{
		// Polling Untill Bus be Free to win arbitration
		while(READ_BIT(hi2c->I2Cx->SR2, BUSY_BIT_Pos));
 8000b26:	bf00      	nop
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	085b      	lsrs	r3, r3, #1
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d1f7      	bne.n	8000b28 <Generate_START+0x14>
	}
	// Send START Bit
	SET_BIT(hi2c->I2Cx->CR1, START_BIT_Pos);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b46:	601a      	str	r2, [r3, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr

08000b52 <Master_Transmit_Address>:


static void Master_Transmit_Address(I2C * hi2c, unsigned int DevAddress ,AddressMode Mode, W_R COMMAND)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b088      	sub	sp, #32
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	60f8      	str	r0, [r7, #12]
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	461a      	mov	r2, r3
 8000b60:	460b      	mov	r3, r1
 8000b62:	71fb      	strb	r3, [r7, #7]
 8000b64:	4613      	mov	r3, r2
 8000b66:	71bb      	strb	r3, [r7, #6]
	if (Mode == _7BIT_ADD)
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d107      	bne.n	8000b7e <Master_Transmit_Address+0x2c>
	{
		hi2c->I2Cx->DR = (DevAddress << 1 | COMMAND);
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	0059      	lsls	r1, r3, #1
 8000b72:	79ba      	ldrb	r2, [r7, #6]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	611a      	str	r2, [r3, #16]


		}

	}
}
 8000b7c:	e06a      	b.n	8000c54 <Master_Transmit_Address+0x102>
	else if (Mode == _10BIT_ADD)
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d167      	bne.n	8000c54 <Master_Transmit_Address+0x102>
		if (COMMAND == WRITE)
 8000b84:	79bb      	ldrb	r3, [r7, #6]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d123      	bne.n	8000bd2 <Master_Transmit_Address+0x80>
			unsigned char TempAddress = DevAddress;
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	75fb      	strb	r3, [r7, #23]
			TempAddress = ((DevAddress >> 8) & 0b11);
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	0a1b      	lsrs	r3, r3, #8
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	f003 0303 	and.w	r3, r3, #3
 8000b98:	75fb      	strb	r3, [r7, #23]
			hi2c->I2Cx->DR = RESERVED_FRAME_10BIT_ADDRESS | (TempAddress << 1) | COMMAND;
 8000b9a:	7dfb      	ldrb	r3, [r7, #23]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	f043 02f0 	orr.w	r2, r3, #240	; 0xf0
 8000ba2:	79bb      	ldrb	r3, [r7, #6]
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	611a      	str	r2, [r3, #16]
			while(!READ_BIT(hi2c->I2Cx->SR1, ADD10_BIT_Pos));
 8000bac:	bf00      	nop
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	695b      	ldr	r3, [r3, #20]
 8000bb4:	08db      	lsrs	r3, r3, #3
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d0f7      	beq.n	8000bae <Master_Transmit_Address+0x5c>
			dummy_reg = hi2c->I2Cx->SR1;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	695b      	ldr	r3, [r3, #20]
 8000bc4:	61bb      	str	r3, [r7, #24]
			hi2c->I2Cx->DR = (DevAddress & 0xFF);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	68ba      	ldr	r2, [r7, #8]
 8000bcc:	b2d2      	uxtb	r2, r2
 8000bce:	611a      	str	r2, [r3, #16]
}
 8000bd0:	e040      	b.n	8000c54 <Master_Transmit_Address+0x102>
		else if (COMMAND == READ)
 8000bd2:	79bb      	ldrb	r3, [r7, #6]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d13d      	bne.n	8000c54 <Master_Transmit_Address+0x102>
			unsigned char TempAddress = DevAddress;
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	77fb      	strb	r3, [r7, #31]
			TempAddress = ((DevAddress >> 8) & 0b11);
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	0a1b      	lsrs	r3, r3, #8
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	f003 0303 	and.w	r3, r3, #3
 8000be6:	77fb      	strb	r3, [r7, #31]
			hi2c->I2Cx->DR = RESERVED_FRAME_10BIT_ADDRESS | (TempAddress << 1) | COMMAND;
 8000be8:	7ffb      	ldrb	r3, [r7, #31]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	f043 02f0 	orr.w	r2, r3, #240	; 0xf0
 8000bf0:	79bb      	ldrb	r3, [r7, #6]
 8000bf2:	431a      	orrs	r2, r3
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	611a      	str	r2, [r3, #16]
			while(!READ_BIT(hi2c->I2Cx->SR1, ADD10_BIT_Pos));
 8000bfa:	bf00      	nop
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	08db      	lsrs	r3, r3, #3
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d0f7      	beq.n	8000bfc <Master_Transmit_Address+0xaa>
			dummy_reg = hi2c->I2Cx->SR1;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	61bb      	str	r3, [r7, #24]
			hi2c->I2Cx->DR = (DevAddress & 0xFF);
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	68ba      	ldr	r2, [r7, #8]
 8000c1a:	b2d2      	uxtb	r2, r2
 8000c1c:	611a      	str	r2, [r3, #16]
			Generate_START(hi2c, RepeatedSTART);
 8000c1e:	2101      	movs	r1, #1
 8000c20:	68f8      	ldr	r0, [r7, #12]
 8000c22:	f7ff ff77 	bl	8000b14 <Generate_START>
			while (!READ_BIT(hi2c->I2Cx->SR1, SB_BIT_Pos));
 8000c26:	bf00      	nop
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d0f8      	beq.n	8000c28 <Master_Transmit_Address+0xd6>
			TempAddress = ((DevAddress >> 8) & 0b11);
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	f003 0303 	and.w	r3, r3, #3
 8000c40:	77fb      	strb	r3, [r7, #31]
			hi2c->I2Cx->DR = RESERVED_FRAME_10BIT_ADDRESS | (TempAddress << 1) | COMMAND;
 8000c42:	7ffb      	ldrb	r3, [r7, #31]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	f043 02f0 	orr.w	r2, r3, #240	; 0xf0
 8000c4a:	79bb      	ldrb	r3, [r7, #6]
 8000c4c:	431a      	orrs	r2, r3
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	611a      	str	r2, [r3, #16]
}
 8000c54:	bf00      	nop
 8000c56:	3720      	adds	r7, #32
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <Generate_STOP>:

static void Generate_STOP(I2C * hi2c, STOP_t STOP_Cond)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	70fb      	strb	r3, [r7, #3]
	if (STOP_Cond == WithSTOP)
 8000c68:	78fb      	ldrb	r3, [r7, #3]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d107      	bne.n	8000c7e <Generate_STOP+0x22>
	{

		SET_BIT(hi2c->I2Cx->CR1, STOP_BIT_Pos);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c7c:	601a      	str	r2, [r3, #0]
	}
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr

08000c88 <RCC_GetSysCLKFreq>:
//01: HSE oscillator used as system clock
//10: PLL used as system clock
//11: Not applicable

uint32_t RCC_GetSysCLKFreq(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
	switch(((RCC->CFGR >> 2) & 0b11))
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <RCC_GetSysCLKFreq+0x20>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	089b      	lsrs	r3, r3, #2
 8000c92:	f003 0303 	and.w	r3, r3, #3
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d101      	bne.n	8000c9e <RCC_GetSysCLKFreq+0x16>
	{
	case 0: return HSI_CLK;
 8000c9a:	4b04      	ldr	r3, [pc, #16]	; (8000cac <RCC_GetSysCLKFreq+0x24>)
 8000c9c:	e000      	b.n	8000ca0 <RCC_GetSysCLKFreq+0x18>
	/* For future Professional RCC Driver this for External Crystal but default I use Internal Crystal 8MHZ */
	case 1:
	case 2:
	default: return 16000000; // To Do From RCC Professional Driver
 8000c9e:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <RCC_GetSysCLKFreq+0x28>)
	}
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	007a1200 	.word	0x007a1200
 8000cb0:	00f42400 	.word	0x00f42400

08000cb4 <RCC_GetPCLK1Freq>:
//100: HCLK divided by 2
//101: HCLK divided by 4
//110: HCLK divided by 8
//111: HCLK divided by 16
uint32_t RCC_GetPCLK1Freq(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
	return (RCC_GetSysCLKFreq() >> (APBPrescTrable[(RCC->CFGR >> 8) & 0b111]));
 8000cb8:	f7ff ffe6 	bl	8000c88 <RCC_GetSysCLKFreq>
 8000cbc:	4601      	mov	r1, r0
 8000cbe:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <RCC_GetPCLK1Freq+0x20>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	0a1b      	lsrs	r3, r3, #8
 8000cc4:	f003 0307 	and.w	r3, r3, #7
 8000cc8:	4a03      	ldr	r2, [pc, #12]	; (8000cd8 <RCC_GetPCLK1Freq+0x24>)
 8000cca:	5cd3      	ldrb	r3, [r2, r3]
 8000ccc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	08000e04 	.word	0x08000e04

08000cdc <USART1_IRQHandler>:
	}
}

// ISR
void USART1_IRQHandler()
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	P_IRQ_CallBack[0]();
 8000ce0:	4b02      	ldr	r3, [pc, #8]	; (8000cec <USART1_IRQHandler+0x10>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4798      	blx	r3
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000074 	.word	0x20000074

08000cf0 <USART2_IRQHandler>:

void USART2_IRQHandler()
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	P_IRQ_CallBack[1]();
 8000cf4:	4b02      	ldr	r3, [pc, #8]	; (8000d00 <USART2_IRQHandler+0x10>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	4798      	blx	r3
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000074 	.word	0x20000074

08000d04 <USART3_IRQHandler>:

void USART3_IRQHandler()
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	P_IRQ_CallBack[2]();
 8000d08:	4b02      	ldr	r3, [pc, #8]	; (8000d14 <USART3_IRQHandler+0x10>)
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	4798      	blx	r3
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000074 	.word	0x20000074

08000d18 <main>:




int main()
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
//	RCC_GPIOB_CLK_EN;
//	RCC_AFIO_CLK_EN;

//	init_Func();

	unsigned char TX_BUFFER[2] = {5,6};
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <main+0x30>)
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	80bb      	strh	r3, [r7, #4]
	unsigned char RX_BUFFER[2];

	EEPROM_init();
 8000d24:	f7ff fa24 	bl	8000170 <EEPROM_init>
	uint16_t y = 0x9595;
 8000d28:	f249 5395 	movw	r3, #38293	; 0x9595
 8000d2c:	80fb      	strh	r3, [r7, #6]
	EEPROM_Write(y, TX_BUFFER, 2);
 8000d2e:	1d39      	adds	r1, r7, #4
 8000d30:	88fb      	ldrh	r3, [r7, #6]
 8000d32:	2202      	movs	r2, #2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fa3d 	bl	80001b4 <EEPROM_Write>
	EEPROM_Read(y, RX_BUFFER, 2);
 8000d3a:	4639      	mov	r1, r7
 8000d3c:	88fb      	ldrh	r3, [r7, #6]
 8000d3e:	2202      	movs	r2, #2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fa89 	bl	8000258 <EEPROM_Read>


	while (1)
 8000d46:	e7fe      	b.n	8000d46 <main+0x2e>
 8000d48:	08000e00 	.word	0x08000e00

08000d4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d4c:	480d      	ldr	r0, [pc, #52]	; (8000d84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d4e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d50:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d54:	480c      	ldr	r0, [pc, #48]	; (8000d88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d56:	490d      	ldr	r1, [pc, #52]	; (8000d8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d58:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <LoopForever+0xe>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d5c:	e002      	b.n	8000d64 <LoopCopyDataInit>

08000d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d62:	3304      	adds	r3, #4

08000d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d68:	d3f9      	bcc.n	8000d5e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d6c:	4c0a      	ldr	r4, [pc, #40]	; (8000d98 <LoopForever+0x16>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d70:	e001      	b.n	8000d76 <LoopFillZerobss>

08000d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d74:	3204      	adds	r2, #4

08000d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d78:	d3fb      	bcc.n	8000d72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d7a:	f000 f811 	bl	8000da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d7e:	f7ff ffcb 	bl	8000d18 <main>

08000d82 <LoopForever>:

LoopForever:
    b LoopForever
 8000d82:	e7fe      	b.n	8000d82 <LoopForever>
  ldr   r0, =_estack
 8000d84:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d8c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000d90:	08000e14 	.word	0x08000e14
  ldr r2, =_sbss
 8000d94:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000d98:	20000080 	.word	0x20000080

08000d9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d9c:	e7fe      	b.n	8000d9c <ADC1_2_IRQHandler>
	...

08000da0 <__libc_init_array>:
 8000da0:	b570      	push	{r4, r5, r6, lr}
 8000da2:	2500      	movs	r5, #0
 8000da4:	4e0c      	ldr	r6, [pc, #48]	; (8000dd8 <__libc_init_array+0x38>)
 8000da6:	4c0d      	ldr	r4, [pc, #52]	; (8000ddc <__libc_init_array+0x3c>)
 8000da8:	1ba4      	subs	r4, r4, r6
 8000daa:	10a4      	asrs	r4, r4, #2
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	d109      	bne.n	8000dc4 <__libc_init_array+0x24>
 8000db0:	f000 f81a 	bl	8000de8 <_init>
 8000db4:	2500      	movs	r5, #0
 8000db6:	4e0a      	ldr	r6, [pc, #40]	; (8000de0 <__libc_init_array+0x40>)
 8000db8:	4c0a      	ldr	r4, [pc, #40]	; (8000de4 <__libc_init_array+0x44>)
 8000dba:	1ba4      	subs	r4, r4, r6
 8000dbc:	10a4      	asrs	r4, r4, #2
 8000dbe:	42a5      	cmp	r5, r4
 8000dc0:	d105      	bne.n	8000dce <__libc_init_array+0x2e>
 8000dc2:	bd70      	pop	{r4, r5, r6, pc}
 8000dc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dc8:	4798      	blx	r3
 8000dca:	3501      	adds	r5, #1
 8000dcc:	e7ee      	b.n	8000dac <__libc_init_array+0xc>
 8000dce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dd2:	4798      	blx	r3
 8000dd4:	3501      	adds	r5, #1
 8000dd6:	e7f2      	b.n	8000dbe <__libc_init_array+0x1e>
 8000dd8:	08000e0c 	.word	0x08000e0c
 8000ddc:	08000e0c 	.word	0x08000e0c
 8000de0:	08000e0c 	.word	0x08000e0c
 8000de4:	08000e10 	.word	0x08000e10

08000de8 <_init>:
 8000de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dea:	bf00      	nop
 8000dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dee:	bc08      	pop	{r3}
 8000df0:	469e      	mov	lr, r3
 8000df2:	4770      	bx	lr

08000df4 <_fini>:
 8000df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df6:	bf00      	nop
 8000df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dfa:	bc08      	pop	{r3}
 8000dfc:	469e      	mov	lr, r3
 8000dfe:	4770      	bx	lr
