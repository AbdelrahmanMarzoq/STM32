
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ae4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000c14  08000c14  00010c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c1c  08000c1c  00010c24  2**0
                  CONTENTS
  4 .ARM          00000000  08000c1c  08000c1c  00010c24  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c1c  08000c24  00010c24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c1c  08000c1c  00010c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c20  08000c20  00010c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000000  08000c24  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  08000c24  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010c24  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004208  00000000  00000000  00010c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000999  00000000  00000000  00014e55  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009d8  00000000  00000000  000157ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001c0  00000000  00000000  000161c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000168  00000000  00000000  00016388  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000d87  00000000  00000000  000164f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002703  00000000  00000000  00017277  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a57b  00000000  00000000  0001997a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00023ef5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000554  00000000  00000000  00023f70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000bfc 	.word	0x08000bfc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000bfc 	.word	0x08000bfc

08000170 <EXTI0_IRQHandler>:
	default: break;
	}
}

void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	// While Execution this function Means that NVIC Receive Ack signal from CPU
	// Disable Pending Request From EXTI Peripheral And Calling Your Provided Function
	EXTI->PR |= 1<<EXTI0;
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	GP_IRQ[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	2000001c 	.word	0x2000001c

08000194 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	// While Execution this function Means that NVIC Receive Ack signal from CPU
	// Disable Pending Request From EXTI Peripheral And Calling Your Provided Function
	EXTI->PR |= 1<<EXTI1;
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	GP_IRQ[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	2000001c 	.word	0x2000001c

080001b8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	// While Execution this function Means that NVIC Receive Ack signal from CPU
	// Disable Pending Request From EXTI Peripheral And Calling Your Provided Function
	EXTI->PR |= 1<<EXTI2;
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
	GP_IRQ[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	2000001c 	.word	0x2000001c

080001dc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	// While Execution this function Means that NVIC Receive Ack signal from CPU
	// Disable Pending Request From EXTI Peripheral And Calling Your Provided Function
	EXTI->PR |= 1<<EXTI3;
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
	GP_IRQ[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	2000001c 	.word	0x2000001c

08000200 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	// While Execution this function Means that NVIC Receive Ack signal from CPU
	// Disable Pending Request From EXTI Peripheral And Calling Your Provided Function
	EXTI->PR |= 1<<EXTI4;
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
	GP_IRQ[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	2000001c 	.word	0x2000001c

08000224 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	// While Execution this function Means that NVIC Receive Ack signal from CPU
	// Disable Pending Request From EXTI Peripheral And Calling Your Provided Function
	if (EXTI->PR & 1<<5){	EXTI->PR |= 1<<EXTI5;	GP_IRQ[5]();}
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if (EXTI->PR & 1<<6){	EXTI->PR |= 1<<EXTI6;	GP_IRQ[6]();}
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if (EXTI->PR & 1<<7){	EXTI->PR |= 1<<EXTI7;	GP_IRQ[7]();}
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if (EXTI->PR & 1<<8){	EXTI->PR |= 1<<EXTI8;	GP_IRQ[8]();}
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if (EXTI->PR & 1<<9){	EXTI->PR |= 1<<EXTI9;	GP_IRQ[9]();}
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	2000001c 	.word	0x2000001c

080002cc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	// While Execution this function Means that NVIC Receive Ack signal from CPU
	// Disable Pending Request From EXTI Peripheral And Calling Your Provided Function
	if (EXTI->PR & 1<<10){	EXTI->PR |= 1<<EXTI10;	GP_IRQ[10]();}
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if (EXTI->PR & 1<<11){	EXTI->PR |= 1<<EXTI11;	GP_IRQ[11]();}
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if (EXTI->PR & 1<<12){	EXTI->PR |= 1<<EXTI12;	GP_IRQ[12]();}
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if (EXTI->PR & 1<<13){	EXTI->PR |= 1<<EXTI13;	GP_IRQ[13]();}
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if (EXTI->PR & 1<<14){	EXTI->PR |= 1<<EXTI14;	GP_IRQ[14]();}
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	if (EXTI->PR & 1<<15){	EXTI->PR |= 1<<EXTI15;	GP_IRQ[15]();}
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	2000001c 	.word	0x2000001c

08000390 <GetPos>:
							/*************************************/
							/*       Function Definition         */
							/*************************************/

uint8_t GetPos(PINy_t PinNumber)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	2b80      	cmp	r3, #128	; 0x80
 800039e:	d042      	beq.n	8000426 <GetPos+0x96>
 80003a0:	2b80      	cmp	r3, #128	; 0x80
 80003a2:	dc11      	bgt.n	80003c8 <GetPos+0x38>
 80003a4:	2b08      	cmp	r3, #8
 80003a6:	d036      	beq.n	8000416 <GetPos+0x86>
 80003a8:	2b08      	cmp	r3, #8
 80003aa:	dc06      	bgt.n	80003ba <GetPos+0x2a>
 80003ac:	2b02      	cmp	r3, #2
 80003ae:	d02e      	beq.n	800040e <GetPos+0x7e>
 80003b0:	2b04      	cmp	r3, #4
 80003b2:	d02e      	beq.n	8000412 <GetPos+0x82>
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d028      	beq.n	800040a <GetPos+0x7a>
 80003b8:	e037      	b.n	800042a <GetPos+0x9a>
 80003ba:	2b20      	cmp	r3, #32
 80003bc:	d02f      	beq.n	800041e <GetPos+0x8e>
 80003be:	2b40      	cmp	r3, #64	; 0x40
 80003c0:	d02f      	beq.n	8000422 <GetPos+0x92>
 80003c2:	2b10      	cmp	r3, #16
 80003c4:	d029      	beq.n	800041a <GetPos+0x8a>
 80003c6:	e030      	b.n	800042a <GetPos+0x9a>
 80003c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003cc:	d023      	beq.n	8000416 <GetPos+0x86>
 80003ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003d2:	dc09      	bgt.n	80003e8 <GetPos+0x58>
 80003d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003d8:	d019      	beq.n	800040e <GetPos+0x7e>
 80003da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003de:	d018      	beq.n	8000412 <GetPos+0x82>
 80003e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003e4:	d011      	beq.n	800040a <GetPos+0x7a>
 80003e6:	e020      	b.n	800042a <GetPos+0x9a>
 80003e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003ec:	d017      	beq.n	800041e <GetPos+0x8e>
 80003ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003f2:	dc03      	bgt.n	80003fc <GetPos+0x6c>
 80003f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003f8:	d00f      	beq.n	800041a <GetPos+0x8a>
 80003fa:	e016      	b.n	800042a <GetPos+0x9a>
 80003fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000400:	d00f      	beq.n	8000422 <GetPos+0x92>
 8000402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000406:	d00e      	beq.n	8000426 <GetPos+0x96>
 8000408:	e00f      	b.n	800042a <GetPos+0x9a>
	{
	case GPIO_PIN0 :
	case GPIO_PIN8 :
		return 0; break;
 800040a:	2300      	movs	r3, #0
 800040c:	e00e      	b.n	800042c <GetPos+0x9c>
	case GPIO_PIN1 :
	case GPIO_PIN9 :
		return 4; break;
 800040e:	2304      	movs	r3, #4
 8000410:	e00c      	b.n	800042c <GetPos+0x9c>
	case GPIO_PIN2 :
	case GPIO_PIN10:
		return 8; break;
 8000412:	2308      	movs	r3, #8
 8000414:	e00a      	b.n	800042c <GetPos+0x9c>
	case GPIO_PIN3 :
	case GPIO_PIN11:
		return 12; break;
 8000416:	230c      	movs	r3, #12
 8000418:	e008      	b.n	800042c <GetPos+0x9c>
	case GPIO_PIN4 :
	case GPIO_PIN12:
		return 16; break;
 800041a:	2310      	movs	r3, #16
 800041c:	e006      	b.n	800042c <GetPos+0x9c>
	case GPIO_PIN5 :
	case GPIO_PIN13:
		return 20; break;
 800041e:	2314      	movs	r3, #20
 8000420:	e004      	b.n	800042c <GetPos+0x9c>
	case GPIO_PIN6 :
	case GPIO_PIN14:
		return 24; break;
 8000422:	2318      	movs	r3, #24
 8000424:	e002      	b.n	800042c <GetPos+0x9c>
	case GPIO_PIN7 :
	case GPIO_PIN15:
		return 28; break;
 8000426:	231c      	movs	r3, #28
 8000428:	e000      	b.n	800042c <GetPos+0x9c>
	default :
		return 0; break;
 800042a:	2300      	movs	r3, #0
	}
}
 800042c:	4618      	mov	r0, r3
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr

08000436 <GPIO_INIT>:

void GPIO_INIT(GPIO_PinConfig_t *myPin)
{
 8000436:	b590      	push	{r4, r7, lr}
 8000438:	b085      	sub	sp, #20
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
	volatile uint32_t *configReg = NULL;
 800043e:	2300      	movs	r3, #0
 8000440:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_Config = 0x0;
 8000442:	2300      	movs	r3, #0
 8000444:	73fb      	strb	r3, [r7, #15]
	configReg = (myPin->GPIO_PinNumber < GPIO_PIN8) ? (&(myPin->GPIOx->CRL)) : (&(myPin->GPIOx->CRH));
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	889b      	ldrh	r3, [r3, #4]
 800044a:	2bff      	cmp	r3, #255	; 0xff
 800044c:	d802      	bhi.n	8000454 <GPIO_INIT+0x1e>
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	e002      	b.n	800045a <GPIO_INIT+0x24>
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	3304      	adds	r3, #4
 800045a:	60bb      	str	r3, [r7, #8]
	// Clear CNF0[1:0] MODE0[1:0]
	(*configReg) &= ~(0xF << GetPos(myPin->GPIO_PinNumber));
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	889b      	ldrh	r3, [r3, #4]
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff ff95 	bl	8000390 <GetPos>
 8000466:	4603      	mov	r3, r0
 8000468:	461a      	mov	r2, r3
 800046a:	230f      	movs	r3, #15
 800046c:	4093      	lsls	r3, r2
 800046e:	43da      	mvns	r2, r3
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	401a      	ands	r2, r3
 8000476:	68bb      	ldr	r3, [r7, #8]
 8000478:	601a      	str	r2, [r3, #0]

	if ( (myPin->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (myPin->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (myPin->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (myPin->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	799b      	ldrb	r3, [r3, #6]
 800047e:	2b07      	cmp	r3, #7
 8000480:	d00b      	beq.n	800049a <GPIO_INIT+0x64>
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	799b      	ldrb	r3, [r3, #6]
 8000486:	2b06      	cmp	r3, #6
 8000488:	d007      	beq.n	800049a <GPIO_INIT+0x64>
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	799b      	ldrb	r3, [r3, #6]
 800048e:	2b05      	cmp	r3, #5
 8000490:	d003      	beq.n	800049a <GPIO_INIT+0x64>
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	799b      	ldrb	r3, [r3, #6]
 8000496:	2b04      	cmp	r3, #4
 8000498:	d10e      	bne.n	80004b8 <GPIO_INIT+0x82>
	{
		// Set CNF0[1:0] -> (his mode)  MODE0[1:0] -> 00
		Pin_Config = ((((myPin->GPIO_MODE - 4) << 2) | (myPin->GPIO_OUTPUT_Speed)) & 0x0F);
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	799b      	ldrb	r3, [r3, #6]
 800049e:	3b04      	subs	r3, #4
 80004a0:	009b      	lsls	r3, r3, #2
 80004a2:	b25a      	sxtb	r2, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	79db      	ldrb	r3, [r3, #7]
 80004a8:	b25b      	sxtb	r3, r3
 80004aa:	4313      	orrs	r3, r2
 80004ac:	b25b      	sxtb	r3, r3
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	f003 030f 	and.w	r3, r3, #15
 80004b4:	73fb      	strb	r3, [r7, #15]
 80004b6:	e030      	b.n	800051a <GPIO_INIT+0xe4>
	}
	else
	{
		if (myPin->GPIO_MODE == GPIO_MODE_INPUT_AF) // Considered input Floating
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	799b      	ldrb	r3, [r3, #6]
 80004bc:	2b08      	cmp	r3, #8
 80004be:	d102      	bne.n	80004c6 <GPIO_INIT+0x90>
		{
			Pin_Config = ((GPIO_MODE_INPUT_FLO << 2 | 0x0) & 0x0F);
 80004c0:	2304      	movs	r3, #4
 80004c2:	73fb      	strb	r3, [r7, #15]
 80004c4:	e029      	b.n	800051a <GPIO_INIT+0xe4>
		}
		else if (myPin->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	799b      	ldrb	r3, [r3, #6]
 80004ca:	2b02      	cmp	r3, #2
 80004cc:	d10c      	bne.n	80004e8 <GPIO_INIT+0xb2>
		{
			Pin_Config = ((GPIO_MODE_INPUT_PU << 2 | 0x0) & 0x0F);
 80004ce:	2308      	movs	r3, #8
 80004d0:	73fb      	strb	r3, [r7, #15]
			//From Table 20. Port bit configuration table-> Set ODR->1 to set pin as Input Pull Up
			myPin->GPIOx->ODR |= (myPin->GPIO_PinNumber);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	68da      	ldr	r2, [r3, #12]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	889b      	ldrh	r3, [r3, #4]
 80004dc:	4619      	mov	r1, r3
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	430a      	orrs	r2, r1
 80004e4:	60da      	str	r2, [r3, #12]
 80004e6:	e018      	b.n	800051a <GPIO_INIT+0xe4>
		}
		else if (myPin->GPIO_MODE == GPIO_MODE_INPUT_PD)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	799b      	ldrb	r3, [r3, #6]
 80004ec:	2b03      	cmp	r3, #3
 80004ee:	d10d      	bne.n	800050c <GPIO_INIT+0xd6>
		{
			Pin_Config = ((GPIO_MODE_INPUT_PU << 2) & 0x0F);
 80004f0:	2308      	movs	r3, #8
 80004f2:	73fb      	strb	r3, [r7, #15]
			//From Table 20. Port bit configuration table-> Set ODR->0 to set pin as Input Pull Down
			myPin->GPIOx->ODR &= ~(myPin->GPIO_PinNumber);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	68da      	ldr	r2, [r3, #12]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	889b      	ldrh	r3, [r3, #4]
 80004fe:	43db      	mvns	r3, r3
 8000500:	4619      	mov	r1, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	400a      	ands	r2, r1
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	e006      	b.n	800051a <GPIO_INIT+0xe4>
		}
		else
		{
			Pin_Config = ((myPin->GPIO_MODE << 2 | 0x0) & 0x0F);
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	799b      	ldrb	r3, [r3, #6]
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	b2db      	uxtb	r3, r3
 8000514:	f003 030f 	and.w	r3, r3, #15
 8000518:	73fb      	strb	r3, [r7, #15]
		}
	}
	// Writing on CRL OR CRH Reg
	(*configReg) |= ((Pin_Config) << GetPos(myPin->GPIO_PinNumber));
 800051a:	7bfc      	ldrb	r4, [r7, #15]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	889b      	ldrh	r3, [r3, #4]
 8000520:	4618      	mov	r0, r3
 8000522:	f7ff ff35 	bl	8000390 <GetPos>
 8000526:	4603      	mov	r3, r0
 8000528:	fa04 f203 	lsl.w	r2, r4, r3
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	431a      	orrs	r2, r3
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	601a      	str	r2, [r3, #0]
}
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	bd90      	pop	{r4, r7, pc}
	...

08000540 <RCC_GetSysCLKFreq>:
//00: HSI oscillator used as system clock
//01: HSE oscillator used as system clock
//10: PLL used as system clock
//11: Not applicable
uint32_t RCC_GetSysCLKFreq(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
	switch(((RCC->CFGR >> 2) & 0b11))
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <RCC_GetSysCLKFreq+0x20>)
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	089b      	lsrs	r3, r3, #2
 800054a:	f003 0303 	and.w	r3, r3, #3
 800054e:	2b00      	cmp	r3, #0
 8000550:	d000      	beq.n	8000554 <RCC_GetSysCLKFreq+0x14>
	{
	case 0: return HSI_CLK;
	/* For future Professional RCC Driver this for External Crystal but default I use Internal Crystal 8MHZ */
	case 1:
	case 2:
	default: return;
 8000552:	e000      	b.n	8000556 <RCC_GetSysCLKFreq+0x16>
	case 0: return HSI_CLK;
 8000554:	2308      	movs	r3, #8
	}
}
 8000556:	4618      	mov	r0, r3
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000

08000564 <RCC_GetPCLK1Freq>:
//100: HCLK divided by 2
//101: HCLK divided by 4
//110: HCLK divided by 8
//111: HCLK divided by 16
uint32_t RCC_GetPCLK1Freq(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	return (RCC_GetSysCLKFreq() >> (APBPrescTrable[(RCC->CFGR >> 8) & 0b111]));
 8000568:	f7ff ffea 	bl	8000540 <RCC_GetSysCLKFreq>
 800056c:	4601      	mov	r1, r0
 800056e:	4b05      	ldr	r3, [pc, #20]	; (8000584 <RCC_GetPCLK1Freq+0x20>)
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	0a1b      	lsrs	r3, r3, #8
 8000574:	f003 0307 	and.w	r3, r3, #7
 8000578:	4a03      	ldr	r2, [pc, #12]	; (8000588 <RCC_GetPCLK1Freq+0x24>)
 800057a:	5cd3      	ldrb	r3, [r2, r3]
 800057c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000580:	4618      	mov	r0, r3
 8000582:	bd80      	pop	{r7, pc}
 8000584:	40021000 	.word	0x40021000
 8000588:	08000c14 	.word	0x08000c14

0800058c <RCC_GetPCLK2Freq>:
//100: HCLK divided by 2
//101: HCLK divided by 4
//110: HCLK divided by 8
//111: HCLK divided by 16
uint32_t RCC_GetPCLK2Freq(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	return (RCC_GetSysCLKFreq() >> (APBPrescTrable[(RCC->CFGR >> 11) & 0b111]));
 8000590:	f7ff ffd6 	bl	8000540 <RCC_GetSysCLKFreq>
 8000594:	4601      	mov	r1, r0
 8000596:	4b05      	ldr	r3, [pc, #20]	; (80005ac <RCC_GetPCLK2Freq+0x20>)
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	0adb      	lsrs	r3, r3, #11
 800059c:	f003 0307 	and.w	r3, r3, #7
 80005a0:	4a03      	ldr	r2, [pc, #12]	; (80005b0 <RCC_GetPCLK2Freq+0x24>)
 80005a2:	5cd3      	ldrb	r3, [r2, r3]
 80005a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40021000 	.word	0x40021000
 80005b0:	08000c14 	.word	0x08000c14

080005b4 <USART_INIT>:




void USART_INIT(UART *UART_Conf)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	uint32_t PCLK, Mantissa, DIV;

	// Enable Clock for USART Periphral
	if (UART_Conf->UARTx == USART1)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a90      	ldr	r2, [pc, #576]	; (8000804 <USART_INIT+0x250>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d106      	bne.n	80005d4 <USART_INIT+0x20>
		RCC_USART1_CLK_EN;
 80005c6:	4b90      	ldr	r3, [pc, #576]	; (8000808 <USART_INIT+0x254>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	4a8f      	ldr	r2, [pc, #572]	; (8000808 <USART_INIT+0x254>)
 80005cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d0:	6193      	str	r3, [r2, #24]
 80005d2:	e016      	b.n	8000602 <USART_INIT+0x4e>
	else if (UART_Conf->UARTx == USART2)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a8c      	ldr	r2, [pc, #560]	; (800080c <USART_INIT+0x258>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d106      	bne.n	80005ec <USART_INIT+0x38>
		RCC_USART2_CLK_EN;
 80005de:	4b8a      	ldr	r3, [pc, #552]	; (8000808 <USART_INIT+0x254>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	4a89      	ldr	r2, [pc, #548]	; (8000808 <USART_INIT+0x254>)
 80005e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e8:	61d3      	str	r3, [r2, #28]
 80005ea:	e00a      	b.n	8000602 <USART_INIT+0x4e>
	else if (UART_Conf->UARTx == USART3)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a87      	ldr	r2, [pc, #540]	; (8000810 <USART_INIT+0x25c>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d105      	bne.n	8000602 <USART_INIT+0x4e>
		RCC_USART3_CLK_EN;
 80005f6:	4b84      	ldr	r3, [pc, #528]	; (8000808 <USART_INIT+0x254>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	4a83      	ldr	r2, [pc, #524]	; (8000808 <USART_INIT+0x254>)
 80005fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000600:	61d3      	str	r3, [r2, #28]
	//	When this bit is cleared the USART prescalers and outputs are stopped and the end of the
	//	current
	//	byte transfer in order to reduce power consumption. This bit is set and cleared by software.
	//	0: USART prescaler and outputs disabled
	//	1: USART enable
	UART_Conf->UARTx->CR1 |= 1<<13;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	68da      	ldr	r2, [r3, #12]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000610:	60da      	str	r2, [r3, #12]

	// Init TX & RX
	if (UART_Conf->USART_Mode == USART_MODE_RX)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	791b      	ldrb	r3, [r3, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d114      	bne.n	8000644 <USART_INIT+0x90>
	{
		//Enable RX and Disable TX on Bit RE and TE on CR1 Reg
		UART_Conf->UARTx->CR1 |= 1<<2;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	68da      	ldr	r2, [r3, #12]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f042 0204 	orr.w	r2, r2, #4
 8000628:	60da      	str	r2, [r3, #12]
		UART_Conf->UARTx->CR1 &= (~(1<<3));
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	68da      	ldr	r2, [r3, #12]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f022 0208 	bic.w	r2, r2, #8
 8000638:	60da      	str	r2, [r3, #12]
		// Init Pins for USART
		USART_GPIO_RX_PINs(&UART_Conf);
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	4618      	mov	r0, r3
 800063e:	f000 f9fd 	bl	8000a3c <USART_GPIO_RX_PINs>
 8000642:	e034      	b.n	80006ae <USART_INIT+0xfa>
	}
	else if (UART_Conf->USART_Mode == USART_MODE_TX)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	791b      	ldrb	r3, [r3, #4]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d114      	bne.n	8000676 <USART_INIT+0xc2>
	{
		//Enable TX and Disable RX on Bit RE and TE on CR1 Reg
		UART_Conf->UARTx->CR1 &= (~(1<<2));
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	68da      	ldr	r2, [r3, #12]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f022 0204 	bic.w	r2, r2, #4
 800065a:	60da      	str	r2, [r3, #12]
		UART_Conf->UARTx->CR1 |= 1<<3;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	68da      	ldr	r2, [r3, #12]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f042 0208 	orr.w	r2, r2, #8
 800066a:	60da      	str	r2, [r3, #12]
		// Init Pins for USART
		USART_GPIO_TX_PINs(&UART_Conf);
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	4618      	mov	r0, r3
 8000670:	f000 f998 	bl	80009a4 <USART_GPIO_TX_PINs>
 8000674:	e01b      	b.n	80006ae <USART_INIT+0xfa>
	}
	else if (UART_Conf->USART_Mode == USART_MODE_TX_RX)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	791b      	ldrb	r3, [r3, #4]
 800067a:	2b02      	cmp	r3, #2
 800067c:	d117      	bne.n	80006ae <USART_INIT+0xfa>
	{
		//Enable TX & RX on Bit RE and TE on CR1 Reg
		UART_Conf->UARTx->CR1 |= 1<<2;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	68da      	ldr	r2, [r3, #12]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f042 0204 	orr.w	r2, r2, #4
 800068c:	60da      	str	r2, [r3, #12]
		UART_Conf->UARTx->CR1 |= 1<<3;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	68da      	ldr	r2, [r3, #12]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f042 0208 	orr.w	r2, r2, #8
 800069c:	60da      	str	r2, [r3, #12]
		// Init Pins for USART
		USART_GPIO_RX_PINs(&UART_Conf);
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 f9cb 	bl	8000a3c <USART_GPIO_RX_PINs>
		USART_GPIO_TX_PINs(&UART_Conf);
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 f97b 	bl	80009a4 <USART_GPIO_TX_PINs>
	}

	// Init Data Byte sending
	UART_Conf->UARTx->CR1 &= ~(1<<12);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	68da      	ldr	r2, [r3, #12]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80006bc:	60da      	str	r2, [r3, #12]


	// Init Parity Feature
	if (UART_Conf->Parity == UART_PARITY_EN)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	7b1b      	ldrb	r3, [r3, #12]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d121      	bne.n	800070a <USART_INIT+0x156>
	{
		UART_Conf->UARTx->CR1 |= 1<<10;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	68da      	ldr	r2, [r3, #12]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80006d4:	60da      	str	r2, [r3, #12]
		if (UART_Conf->Parity_Selection == UART_PARITY_EVEN)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7b5b      	ldrb	r3, [r3, #13]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d108      	bne.n	80006f0 <USART_INIT+0x13c>
		{
			UART_Conf->UARTx->CR1 &= (~(1<<9));
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	68da      	ldr	r2, [r3, #12]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	e018      	b.n	8000722 <USART_INIT+0x16e>
		}
		else if (UART_Conf->Parity_Selection == UART_PARITY_ODD)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	7b5b      	ldrb	r3, [r3, #13]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d114      	bne.n	8000722 <USART_INIT+0x16e>
		{
			UART_Conf->UARTx->CR1 |= 1<<9;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	68da      	ldr	r2, [r3, #12]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	e00b      	b.n	8000722 <USART_INIT+0x16e>
		}
	}
	else if (UART_Conf->Parity == UART_PARITY_DIS)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	7b1b      	ldrb	r3, [r3, #12]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d107      	bne.n	8000722 <USART_INIT+0x16e>
	{
		UART_Conf->UARTx->CR1 &= (~(1<<10));
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	68da      	ldr	r2, [r3, #12]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000720:	60da      	str	r2, [r3, #12]
	}

	// Init Stop Bit
	if ( UART_Conf->StopBits == UART_StopBits_HALF )
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	7b9b      	ldrb	r3, [r3, #14]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d110      	bne.n	800074c <USART_INIT+0x198>
	{
		UART_Conf->UARTx->CR2 |= 1<<12;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	691a      	ldr	r2, [r3, #16]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000738:	611a      	str	r2, [r3, #16]
		UART_Conf->UARTx->CR2 &= (~(1<<13));
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	691a      	ldr	r2, [r3, #16]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000748:	611a      	str	r2, [r3, #16]
 800074a:	e02d      	b.n	80007a8 <USART_INIT+0x1f4>
	}
	else if ( UART_Conf->StopBits == UART_StopBits_1 )
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	7b9b      	ldrb	r3, [r3, #14]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d108      	bne.n	8000766 <USART_INIT+0x1b2>
	{
		UART_Conf->UARTx->CR2 &= (~(0b11<<12));
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	691a      	ldr	r2, [r3, #16]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000762:	611a      	str	r2, [r3, #16]
 8000764:	e020      	b.n	80007a8 <USART_INIT+0x1f4>

	}
	else if ( UART_Conf->StopBits == UART_StopBits_1_HALF )
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	7b9b      	ldrb	r3, [r3, #14]
 800076a:	2b02      	cmp	r3, #2
 800076c:	d108      	bne.n	8000780 <USART_INIT+0x1cc>
	{
		UART_Conf->UARTx->CR2 |= (0b11<<12);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	691a      	ldr	r2, [r3, #16]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800077c:	611a      	str	r2, [r3, #16]
 800077e:	e013      	b.n	80007a8 <USART_INIT+0x1f4>
	}
	else if ( UART_Conf->StopBits == UART_StopBits_2 )
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	7b9b      	ldrb	r3, [r3, #14]
 8000784:	2b03      	cmp	r3, #3
 8000786:	d10f      	bne.n	80007a8 <USART_INIT+0x1f4>
	{
		UART_Conf->UARTx->CR2 &= (~(1<<12));
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	691a      	ldr	r2, [r3, #16]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000796:	611a      	str	r2, [r3, #16]
		UART_Conf->UARTx->CR2 |= 1<<13;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	691a      	ldr	r2, [r3, #16]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80007a6:	611a      	str	r2, [r3, #16]
	}


	// Init IRQ For USART
	if ( UART_Conf->IRQ_Enable != UART_IRQ_Enable_NONE )
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	7bdb      	ldrb	r3, [r3, #15]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d045      	beq.n	800083c <USART_INIT+0x288>
	{
		UART_Conf->UARTx->CR1 |= UART_Conf->IRQ_Enable;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	68da      	ldr	r2, [r3, #12]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	7bdb      	ldrb	r3, [r3, #15]
 80007ba:	4619      	mov	r1, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	430a      	orrs	r2, r1
 80007c2:	60da      	str	r2, [r3, #12]
		//Enable NVIC For USARTx IRQ
		if ( UART_Conf->UARTx == USART1 )
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a0e      	ldr	r2, [pc, #56]	; (8000804 <USART_INIT+0x250>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d10a      	bne.n	80007e4 <USART_INIT+0x230>
		{
			NVIC_Enable_USART1;
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <USART_INIT+0x260>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a10      	ldr	r2, [pc, #64]	; (8000814 <USART_INIT+0x260>)
 80007d4:	f043 0320 	orr.w	r3, r3, #32
 80007d8:	6013      	str	r3, [r2, #0]
			P_IRQ_CallBack[0] = UART_Conf->P_IRQ_CallBack;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	691b      	ldr	r3, [r3, #16]
 80007de:	4a0e      	ldr	r2, [pc, #56]	; (8000818 <USART_INIT+0x264>)
 80007e0:	6013      	str	r3, [r2, #0]
 80007e2:	e056      	b.n	8000892 <USART_INIT+0x2de>
		}
		else if ( UART_Conf->UARTx == USART2 )
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a08      	ldr	r2, [pc, #32]	; (800080c <USART_INIT+0x258>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d116      	bne.n	800081c <USART_INIT+0x268>
		{
			NVIC_Enable_USART2;
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <USART_INIT+0x260>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a08      	ldr	r2, [pc, #32]	; (8000814 <USART_INIT+0x260>)
 80007f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f8:	6013      	str	r3, [r2, #0]
			P_IRQ_CallBack[1] = UART_Conf->P_IRQ_CallBack;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	691b      	ldr	r3, [r3, #16]
 80007fe:	4a06      	ldr	r2, [pc, #24]	; (8000818 <USART_INIT+0x264>)
 8000800:	6053      	str	r3, [r2, #4]
 8000802:	e046      	b.n	8000892 <USART_INIT+0x2de>
 8000804:	40013800 	.word	0x40013800
 8000808:	40021000 	.word	0x40021000
 800080c:	40004400 	.word	0x40004400
 8000810:	40004800 	.word	0x40004800
 8000814:	e000e104 	.word	0xe000e104
 8000818:	20000058 	.word	0x20000058
		}
		else if ( UART_Conf->UARTx == USART3 )
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a34      	ldr	r2, [pc, #208]	; (80008f4 <USART_INIT+0x340>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d135      	bne.n	8000892 <USART_INIT+0x2de>
		{
			NVIC_Enable_USART3;
 8000826:	4b34      	ldr	r3, [pc, #208]	; (80008f8 <USART_INIT+0x344>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a33      	ldr	r2, [pc, #204]	; (80008f8 <USART_INIT+0x344>)
 800082c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000830:	6013      	str	r3, [r2, #0]
			P_IRQ_CallBack[2] = UART_Conf->P_IRQ_CallBack;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	691b      	ldr	r3, [r3, #16]
 8000836:	4a31      	ldr	r2, [pc, #196]	; (80008fc <USART_INIT+0x348>)
 8000838:	6093      	str	r3, [r2, #8]
 800083a:	e02a      	b.n	8000892 <USART_INIT+0x2de>
		}
	}
	else
	{
		UART_Conf->UARTx->CR1 |= ~(0b1111<<5);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	68da      	ldr	r2, [r3, #12]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f462 72f0 	orn	r2, r2, #480	; 0x1e0
 800084a:	60da      	str	r2, [r3, #12]
		if ( UART_Conf->UARTx == USART1 )
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a2b      	ldr	r2, [pc, #172]	; (8000900 <USART_INIT+0x34c>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d106      	bne.n	8000864 <USART_INIT+0x2b0>
			NVIC_Disable_USART1;
 8000856:	4b2b      	ldr	r3, [pc, #172]	; (8000904 <USART_INIT+0x350>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a2a      	ldr	r2, [pc, #168]	; (8000904 <USART_INIT+0x350>)
 800085c:	f043 0320 	orr.w	r3, r3, #32
 8000860:	6013      	str	r3, [r2, #0]
 8000862:	e016      	b.n	8000892 <USART_INIT+0x2de>
		else if ( UART_Conf->UARTx == USART2 )
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a27      	ldr	r2, [pc, #156]	; (8000908 <USART_INIT+0x354>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d106      	bne.n	800087c <USART_INIT+0x2c8>
			NVIC_Disable_USART2;
 800086e:	4b25      	ldr	r3, [pc, #148]	; (8000904 <USART_INIT+0x350>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a24      	ldr	r2, [pc, #144]	; (8000904 <USART_INIT+0x350>)
 8000874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000878:	6013      	str	r3, [r2, #0]
 800087a:	e00a      	b.n	8000892 <USART_INIT+0x2de>
		else if ( UART_Conf->UARTx == USART3 )
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a1c      	ldr	r2, [pc, #112]	; (80008f4 <USART_INIT+0x340>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d105      	bne.n	8000892 <USART_INIT+0x2de>
			NVIC_Disable_USART3;
 8000886:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <USART_INIT+0x350>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a1e      	ldr	r2, [pc, #120]	; (8000904 <USART_INIT+0x350>)
 800088c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000890:	6013      	str	r3, [r2, #0]
	}

	// Init BaudRate
	if ( UART_Conf->UARTx == USART1 )
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a1a      	ldr	r2, [pc, #104]	; (8000900 <USART_INIT+0x34c>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d103      	bne.n	80008a4 <USART_INIT+0x2f0>
	{
		PCLK = RCC_GetPCLK2Freq();
 800089c:	f7ff fe76 	bl	800058c <RCC_GetPCLK2Freq>
 80008a0:	6178      	str	r0, [r7, #20]
 80008a2:	e002      	b.n	80008aa <USART_INIT+0x2f6>
	}
	else
	{
		PCLK = RCC_GetPCLK1Freq();
 80008a4:	f7ff fe5e 	bl	8000564 <RCC_GetPCLK1Freq>
 80008a8:	6178      	str	r0, [r7, #20]
	}

	Mantissa = PCLK / (16 * UART_Conf->BaudRate);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	011b      	lsls	r3, r3, #4
 80008b0:	697a      	ldr	r2, [r7, #20]
 80008b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b6:	613b      	str	r3, [r7, #16]
	DIV = (PCLK * 100) / (16 * UART_Conf->BaudRate);
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	2264      	movs	r2, #100	; 0x64
 80008bc:	fb02 f203 	mul.w	r2, r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	011b      	lsls	r3, r3, #4
 80008c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ca:	60fb      	str	r3, [r7, #12]
	DIV -= Mantissa;
 80008cc:	68fa      	ldr	r2, [r7, #12]
 80008ce:	693b      	ldr	r3, [r7, #16]
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	60fb      	str	r3, [r7, #12]
	DIV = DIV * (16/100);
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
	UART_Conf->UARTx->BRR = Mantissa << 4 | (DIV & 0xF);
 80008d8:	693b      	ldr	r3, [r7, #16]
 80008da:	0119      	lsls	r1, r3, #4
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f003 020f 	and.w	r2, r3, #15
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	430a      	orrs	r2, r1
 80008e8:	609a      	str	r2, [r3, #8]
}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40004800 	.word	0x40004800
 80008f8:	e000e104 	.word	0xe000e104
 80008fc:	20000058 	.word	0x20000058
 8000900:	40013800 	.word	0x40013800
 8000904:	e000e184 	.word	0xe000e184
 8000908:	40004400 	.word	0x40004400

0800090c <USART_SendData>:

void USART_SendData(UART *UART_Conf, uint8_t *TxBuffer)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
	if (!((UART_Conf->UARTx->SR) & (1<<7)))
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000920:	2b00      	cmp	r3, #0
 8000922:	d107      	bne.n	8000934 <USART_SendData+0x28>
		while(!((UART_Conf->UARTx->SR) & (1<<7)));
 8000924:	bf00      	nop
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000930:	2b00      	cmp	r3, #0
 8000932:	d0f8      	beq.n	8000926 <USART_SendData+0x1a>

	UART_Conf->UARTx->DR = ((*TxBuffer) & (uint8_t)0xFF);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	781a      	ldrb	r2, [r3, #0]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]

}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <USART_RecieveData>:

void USART_RecieveData(UART *UART_Conf, uint8_t *RxBuffer)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	6039      	str	r1, [r7, #0]
	if (!((UART_Conf->UARTx->CR1) & (1<<5)))
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	f003 0320 	and.w	r3, r3, #32
 800095c:	2b00      	cmp	r3, #0
 800095e:	d107      	bne.n	8000970 <USART_RecieveData+0x28>
		while(!((UART_Conf->UARTx->SR) & (1<<5)));
 8000960:	bf00      	nop
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f003 0320 	and.w	r3, r3, #32
 800096c:	2b00      	cmp	r3, #0
 800096e:	d0f8      	beq.n	8000962 <USART_RecieveData+0x1a>


	if (UART_Conf->Parity == UART_PARITY_DIS)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	7b1b      	ldrb	r3, [r3, #12]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d106      	bne.n	8000986 <USART_RecieveData+0x3e>
	{
		*RxBuffer = UART_Conf->UARTx->DR & 0xFF;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	b2da      	uxtb	r2, r3
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		*RxBuffer = UART_Conf->UARTx->DR & 0x7F;
	}
}
 8000984:	e008      	b.n	8000998 <USART_RecieveData+0x50>
		*RxBuffer = UART_Conf->UARTx->DR & 0x7F;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000992:	b2da      	uxtb	r2, r3
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	701a      	strb	r2, [r3, #0]
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
	...

080009a4 <USART_GPIO_TX_PINs>:

static void USART_GPIO_TX_PINs(UART *UART_Conf)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinUSART;

	if ( (UART_Conf)->UARTx == USART1 )
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a1d      	ldr	r2, [pc, #116]	; (8000a28 <USART_GPIO_TX_PINs+0x84>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d10e      	bne.n	80009d4 <USART_GPIO_TX_PINs+0x30>
	{
		//PA9 TX
		PinUSART.GPIOx = GPIOA;
 80009b6:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <USART_GPIO_TX_PINs+0x88>)
 80009b8:	60bb      	str	r3, [r7, #8]
		PinUSART.GPIO_PinNumber = GPIO_PIN9;
 80009ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009be:	81bb      	strh	r3, [r7, #12]
		PinUSART.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80009c0:	2306      	movs	r3, #6
 80009c2:	73bb      	strb	r3, [r7, #14]
		PinUSART.GPIO_OUTPUT_Speed = GPIO_SPEED_50M;
 80009c4:	2303      	movs	r3, #3
 80009c6:	73fb      	strb	r3, [r7, #15]
		GPIO_INIT(&PinUSART);
 80009c8:	f107 0308 	add.w	r3, r7, #8
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fd32 	bl	8000436 <GPIO_INIT>
		PinUSART.GPIO_PinNumber = GPIO_PIN10;
		PinUSART.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
		PinUSART.GPIO_OUTPUT_Speed = GPIO_SPEED_50M;
		GPIO_INIT(&PinUSART);
	}
}
 80009d2:	e025      	b.n	8000a20 <USART_GPIO_TX_PINs+0x7c>
	else if ( (UART_Conf)->UARTx == USART2 )
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a15      	ldr	r2, [pc, #84]	; (8000a30 <USART_GPIO_TX_PINs+0x8c>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d10d      	bne.n	80009fa <USART_GPIO_TX_PINs+0x56>
		PinUSART.GPIOx = GPIOA;
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <USART_GPIO_TX_PINs+0x88>)
 80009e0:	60bb      	str	r3, [r7, #8]
		PinUSART.GPIO_PinNumber = GPIO_PIN2;
 80009e2:	2304      	movs	r3, #4
 80009e4:	81bb      	strh	r3, [r7, #12]
		PinUSART.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80009e6:	2306      	movs	r3, #6
 80009e8:	73bb      	strb	r3, [r7, #14]
		PinUSART.GPIO_OUTPUT_Speed = GPIO_SPEED_50M;
 80009ea:	2303      	movs	r3, #3
 80009ec:	73fb      	strb	r3, [r7, #15]
		GPIO_INIT(&PinUSART);
 80009ee:	f107 0308 	add.w	r3, r7, #8
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fd1f 	bl	8000436 <GPIO_INIT>
}
 80009f8:	e012      	b.n	8000a20 <USART_GPIO_TX_PINs+0x7c>
	else if ( (UART_Conf)->UARTx == USART3 )
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a0d      	ldr	r2, [pc, #52]	; (8000a34 <USART_GPIO_TX_PINs+0x90>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d10d      	bne.n	8000a20 <USART_GPIO_TX_PINs+0x7c>
		PinUSART.GPIOx = GPIOB;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <USART_GPIO_TX_PINs+0x94>)
 8000a06:	60bb      	str	r3, [r7, #8]
		PinUSART.GPIO_PinNumber = GPIO_PIN10;
 8000a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a0c:	81bb      	strh	r3, [r7, #12]
		PinUSART.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000a0e:	2306      	movs	r3, #6
 8000a10:	73bb      	strb	r3, [r7, #14]
		PinUSART.GPIO_OUTPUT_Speed = GPIO_SPEED_50M;
 8000a12:	2303      	movs	r3, #3
 8000a14:	73fb      	strb	r3, [r7, #15]
		GPIO_INIT(&PinUSART);
 8000a16:	f107 0308 	add.w	r3, r7, #8
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fd0b 	bl	8000436 <GPIO_INIT>
}
 8000a20:	bf00      	nop
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40013800 	.word	0x40013800
 8000a2c:	40010800 	.word	0x40010800
 8000a30:	40004400 	.word	0x40004400
 8000a34:	40004800 	.word	0x40004800
 8000a38:	40010c00 	.word	0x40010c00

08000a3c <USART_GPIO_RX_PINs>:

static void USART_GPIO_RX_PINs(UART *UART_Conf)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinUSART;

	if ( (UART_Conf)->UARTx == USART1 )
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a1d      	ldr	r2, [pc, #116]	; (8000ac0 <USART_GPIO_RX_PINs+0x84>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d10e      	bne.n	8000a6c <USART_GPIO_RX_PINs+0x30>
	{
		//PA10 RX
		PinUSART.GPIOx = GPIOA;
 8000a4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <USART_GPIO_RX_PINs+0x88>)
 8000a50:	60bb      	str	r3, [r7, #8]
		PinUSART.GPIO_PinNumber = GPIO_PIN10;
 8000a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a56:	81bb      	strh	r3, [r7, #12]
		PinUSART.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8000a58:	2308      	movs	r3, #8
 8000a5a:	73bb      	strb	r3, [r7, #14]
		PinUSART.GPIO_OUTPUT_Speed = GPIO_SPEED_50M;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	73fb      	strb	r3, [r7, #15]
		GPIO_INIT(&PinUSART);
 8000a60:	f107 0308 	add.w	r3, r7, #8
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fce6 	bl	8000436 <GPIO_INIT>
		PinUSART.GPIO_PinNumber = GPIO_PIN11;
		PinUSART.GPIO_MODE = GPIO_MODE_INPUT_AF;
		PinUSART.GPIO_OUTPUT_Speed = GPIO_SPEED_50M;
		GPIO_INIT(&PinUSART);
	}
}
 8000a6a:	e025      	b.n	8000ab8 <USART_GPIO_RX_PINs+0x7c>
	else if ( (UART_Conf)->UARTx == USART2 )
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a15      	ldr	r2, [pc, #84]	; (8000ac8 <USART_GPIO_RX_PINs+0x8c>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d10d      	bne.n	8000a92 <USART_GPIO_RX_PINs+0x56>
		PinUSART.GPIOx = GPIOA;
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <USART_GPIO_RX_PINs+0x88>)
 8000a78:	60bb      	str	r3, [r7, #8]
		PinUSART.GPIO_PinNumber = GPIO_PIN3;
 8000a7a:	2308      	movs	r3, #8
 8000a7c:	81bb      	strh	r3, [r7, #12]
		PinUSART.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8000a7e:	2308      	movs	r3, #8
 8000a80:	73bb      	strb	r3, [r7, #14]
		PinUSART.GPIO_OUTPUT_Speed = GPIO_SPEED_50M;
 8000a82:	2303      	movs	r3, #3
 8000a84:	73fb      	strb	r3, [r7, #15]
		GPIO_INIT(&PinUSART);
 8000a86:	f107 0308 	add.w	r3, r7, #8
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff fcd3 	bl	8000436 <GPIO_INIT>
}
 8000a90:	e012      	b.n	8000ab8 <USART_GPIO_RX_PINs+0x7c>
	else if ( (UART_Conf)->UARTx == USART3 )
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a0d      	ldr	r2, [pc, #52]	; (8000acc <USART_GPIO_RX_PINs+0x90>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d10d      	bne.n	8000ab8 <USART_GPIO_RX_PINs+0x7c>
		PinUSART.GPIOx = GPIOB;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <USART_GPIO_RX_PINs+0x94>)
 8000a9e:	60bb      	str	r3, [r7, #8]
		PinUSART.GPIO_PinNumber = GPIO_PIN11;
 8000aa0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000aa4:	81bb      	strh	r3, [r7, #12]
		PinUSART.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8000aa6:	2308      	movs	r3, #8
 8000aa8:	73bb      	strb	r3, [r7, #14]
		PinUSART.GPIO_OUTPUT_Speed = GPIO_SPEED_50M;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	73fb      	strb	r3, [r7, #15]
		GPIO_INIT(&PinUSART);
 8000aae:	f107 0308 	add.w	r3, r7, #8
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fcbf 	bl	8000436 <GPIO_INIT>
}
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40013800 	.word	0x40013800
 8000ac4:	40010800 	.word	0x40010800
 8000ac8:	40004400 	.word	0x40004400
 8000acc:	40004800 	.word	0x40004800
 8000ad0:	40010c00 	.word	0x40010c00

08000ad4 <USART1_IRQHandler>:
//	}
//}

// ISR
void USART1_IRQHandler()
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	P_IRQ_CallBack[0]();
 8000ad8:	4b02      	ldr	r3, [pc, #8]	; (8000ae4 <USART1_IRQHandler+0x10>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4798      	blx	r3
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000058 	.word	0x20000058

08000ae8 <USART2_IRQHandler>:

void USART2_IRQHandler()
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	P_IRQ_CallBack[1]();
 8000aec:	4b02      	ldr	r3, [pc, #8]	; (8000af8 <USART2_IRQHandler+0x10>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	4798      	blx	r3
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000058 	.word	0x20000058

08000afc <USART3_IRQHandler>:

void USART3_IRQHandler()
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	P_IRQ_CallBack[2]();
 8000b00:	4b02      	ldr	r3, [pc, #8]	; (8000b0c <USART3_IRQHandler+0x10>)
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	4798      	blx	r3
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000058 	.word	0x20000058

08000b10 <main>:
	}
}


int main(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0

	UART uart1;
	uart1.BaudRate = UART_BaudRate_9600;
 8000b16:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000b1a:	60fb      	str	r3, [r7, #12]
	uart1.UARTx = USART1;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <main+0x4c>)
 8000b1e:	607b      	str	r3, [r7, #4]
	uart1.StopBits = UART_StopBits_1;
 8000b20:	2301      	movs	r3, #1
 8000b22:	74bb      	strb	r3, [r7, #18]
	uart1.IRQ_Enable = UART_IRQ_Enable_NONE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	74fb      	strb	r3, [r7, #19]
	uart1.P_IRQ_CallBack = NULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
	uart1.Parity = UART_PARITY_DIS;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	743b      	strb	r3, [r7, #16]
	uart1.USART_Mode = USART_MODE_TX_RX;
 8000b30:	2302      	movs	r3, #2
 8000b32:	723b      	strb	r3, [r7, #8]
//
	USART_INIT(&uart1);
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fd3c 	bl	80005b4 <USART_INIT>

	uint8_t ch = 'A';
 8000b3c:	2341      	movs	r3, #65	; 0x41
 8000b3e:	70fb      	strb	r3, [r7, #3]
	while(1)
	{
		USART_RecieveData(&uart1, &ch);
 8000b40:	1cfa      	adds	r2, r7, #3
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	4611      	mov	r1, r2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fefe 	bl	8000948 <USART_RecieveData>
		USART_SendData(&uart1, &ch);
 8000b4c:	1cfa      	adds	r2, r7, #3
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	4611      	mov	r1, r2
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff feda 	bl	800090c <USART_SendData>
		USART_RecieveData(&uart1, &ch);
 8000b58:	e7f2      	b.n	8000b40 <main+0x30>
 8000b5a:	bf00      	nop
 8000b5c:	40013800 	.word	0x40013800

08000b60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b60:	480d      	ldr	r0, [pc, #52]	; (8000b98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b62:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b64:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b68:	480c      	ldr	r0, [pc, #48]	; (8000b9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b6a:	490d      	ldr	r1, [pc, #52]	; (8000ba0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ba4 <LoopForever+0xe>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b70:	e002      	b.n	8000b78 <LoopCopyDataInit>

08000b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b76:	3304      	adds	r3, #4

08000b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b7c:	d3f9      	bcc.n	8000b72 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b80:	4c0a      	ldr	r4, [pc, #40]	; (8000bac <LoopForever+0x16>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b84:	e001      	b.n	8000b8a <LoopFillZerobss>

08000b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b88:	3204      	adds	r2, #4

08000b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b8c:	d3fb      	bcc.n	8000b86 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b8e:	f000 f811 	bl	8000bb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b92:	f7ff ffbd 	bl	8000b10 <main>

08000b96 <LoopForever>:

LoopForever:
    b LoopForever
 8000b96:	e7fe      	b.n	8000b96 <LoopForever>
  ldr   r0, =_estack
 8000b98:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000ba4:	08000c24 	.word	0x08000c24
  ldr r2, =_sbss
 8000ba8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000bac:	20000064 	.word	0x20000064

08000bb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC1_2_IRQHandler>
	...

08000bb4 <__libc_init_array>:
 8000bb4:	b570      	push	{r4, r5, r6, lr}
 8000bb6:	2500      	movs	r5, #0
 8000bb8:	4e0c      	ldr	r6, [pc, #48]	; (8000bec <__libc_init_array+0x38>)
 8000bba:	4c0d      	ldr	r4, [pc, #52]	; (8000bf0 <__libc_init_array+0x3c>)
 8000bbc:	1ba4      	subs	r4, r4, r6
 8000bbe:	10a4      	asrs	r4, r4, #2
 8000bc0:	42a5      	cmp	r5, r4
 8000bc2:	d109      	bne.n	8000bd8 <__libc_init_array+0x24>
 8000bc4:	f000 f81a 	bl	8000bfc <_init>
 8000bc8:	2500      	movs	r5, #0
 8000bca:	4e0a      	ldr	r6, [pc, #40]	; (8000bf4 <__libc_init_array+0x40>)
 8000bcc:	4c0a      	ldr	r4, [pc, #40]	; (8000bf8 <__libc_init_array+0x44>)
 8000bce:	1ba4      	subs	r4, r4, r6
 8000bd0:	10a4      	asrs	r4, r4, #2
 8000bd2:	42a5      	cmp	r5, r4
 8000bd4:	d105      	bne.n	8000be2 <__libc_init_array+0x2e>
 8000bd6:	bd70      	pop	{r4, r5, r6, pc}
 8000bd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bdc:	4798      	blx	r3
 8000bde:	3501      	adds	r5, #1
 8000be0:	e7ee      	b.n	8000bc0 <__libc_init_array+0xc>
 8000be2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000be6:	4798      	blx	r3
 8000be8:	3501      	adds	r5, #1
 8000bea:	e7f2      	b.n	8000bd2 <__libc_init_array+0x1e>
 8000bec:	08000c1c 	.word	0x08000c1c
 8000bf0:	08000c1c 	.word	0x08000c1c
 8000bf4:	08000c1c 	.word	0x08000c1c
 8000bf8:	08000c20 	.word	0x08000c20

08000bfc <_init>:
 8000bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bfe:	bf00      	nop
 8000c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c02:	bc08      	pop	{r3}
 8000c04:	469e      	mov	lr, r3
 8000c06:	4770      	bx	lr

08000c08 <_fini>:
 8000c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c0a:	bf00      	nop
 8000c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c0e:	bc08      	pop	{r3}
 8000c10:	469e      	mov	lr, r3
 8000c12:	4770      	bx	lr
